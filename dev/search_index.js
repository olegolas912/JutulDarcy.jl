var documenterSearchIndex = {"docs":
[{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"EditURL = \"../../../examples/compositional_5components.jl\"","category":"page"},{"location":"examples/compositional_5components/#A-more-complex-compositional-model","page":"Compositional with five components","title":"A more complex compositional model","text":"","category":"section"},{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"This example sets up a more complex compositional simulation with five different components. Other than that, the example is similar to the others that include wells and is therefore not commented in great detail.","category":"page"},{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"using MultiComponentFlash\n\nn2_ch4 = MolecularProperty(0.0161594, 4.58e6, 189.515, 9.9701e-05, 0.00854)\nco2 = MolecularProperty(0.04401, 7.3866e6, 304.200, 9.2634e-05, 0.228)\nc2_5 = MolecularProperty(0.0455725, 4.0955e6, 387.607, 2.1708e-04, 0.16733)\nc6_13 = MolecularProperty(0.117740, 3.345e6, 597.497, 3.8116e-04, 0.38609)\nc14_24 = MolecularProperty(0.248827, 1.768e6, 698.515, 7.2141e-04, 0.80784)\n\nbic = [0.11883 0.00070981 0.00077754 0.01 0.011;\n       0.00070981 0.15 0.15 0.15 0.15;\n       0.00077754 0.15 0 0 0;\n       0.01 0.15 0 0 0;\n       0.011 0.15 0 0 0]\n\nmixture = MultiComponentMixture([n2_ch4, co2, c2_5, c6_13, c14_24], A_ij = bic, names = [\"N2-CH4\", \"CO2\", \"C2-5\", \"C6-13\", \"C14-24\"])\neos = GenericCubicEOS(mixture, PengRobinson())\n\nusing Jutul, JutulDarcy, CairoMakie\nDarcy, bar, kg, meter, Kelvin, day = si_units(:darcy, :bar, :kilogram, :meter, :Kelvin, :day)\nnx = ny = 20\nnz = 2\n\ndims = (nx, ny, nz)\ng = CartesianMesh(dims, (1000.0, 1000.0, 1.0))\nnc = number_of_cells(g)\nK = repeat([0.05*Darcy], 1, nc)\nres = reservoir_domain(g, porosity = 0.25, permeability = K)","category":"page"},{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"Set up a vertical well in the first corner, perforated in all layers","category":"page"},{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"prod = setup_vertical_well(g, K, nx, ny, name = :Producer)","category":"page"},{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"Set up an injector in the opposite corner, perforated in all layers","category":"page"},{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"inj = setup_vertical_well(g, K, 1, 1, name = :Injector)\n\nrhoLS = 1000.0*kg/meter^3\nrhoVS = 100.0*kg/meter^3\n\nrhoS = [rhoLS, rhoVS]\nL, V = LiquidPhase(), VaporPhase()","category":"page"},{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"Define system and realize on grid","category":"page"},{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"sys = MultiPhaseCompositionalSystemLV(eos, (L, V))\nmodel, parameters = setup_reservoir_model(res, sys, wells = [inj, prod], reference_densities = rhoS, block_backend = true);\nkr = BrooksCoreyRelPerm(sys, 2.0, 0.0, 1.0)\nmodel = replace_variables!(model, RelativePermeabilities = kr)\n\npush!(model[:Reservoir].output_variables, :Saturations)\n\nT0 = repeat([387.45*Kelvin], 1, nc)\nparameters[:Reservoir][:Temperature] = T0\nstate0 = setup_reservoir_state(model, Pressure = 225*bar, OverallMoleFractions = [0.463, 0.01640, 0.20520, 0.19108, 0.12432]);\n\ndt = repeat([2.0]*day, 365)\nrate_target = TotalRateTarget(0.0015)\nI_ctrl = InjectorControl(rate_target, [0, 1, 0, 0, 0], density = rhoVS)\nbhp_target = BottomHolePressureTarget(100*bar)\nP_ctrl = ProducerControl(bhp_target)\n\ncontrols = Dict()\ncontrols[:Injector] = I_ctrl\ncontrols[:Producer] = P_ctrl\nforces = setup_reservoir_forces(model, control = controls)\nws, states = simulate_reservoir(state0, model, dt, parameters = parameters, forces = forces)\n#!","category":"page"},{"location":"examples/compositional_5components/#Once-the-simulation-is-done,-we-can-plot-the-states","page":"Compositional with five components","title":"Once the simulation is done, we can plot the states","text":"","category":"section"},{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"sg = states[end][:OverallMoleFractions][2, :]\nfig, ax, p = plot_cell_data(g, sg)\nfig\n#!\nsg = states[end][:Saturations][2, :]\nfig, ax, p = plot_cell_data(g, sg)\nfig\n#!\np = states[end][:Pressure]\nfig, ax, p = plot_cell_data(g, p)\nfig","category":"page"},{"location":"examples/compositional_5components/#Example-on-GitHub","page":"Compositional with five components","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"","category":"page"},{"location":"examples/compositional_5components/","page":"Compositional with five components","title":"Compositional with five components","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/intro/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"examples/intro/","page":"Getting started","title":"Getting started","text":"Install packages:","category":"page"},{"location":"examples/intro/","page":"Getting started","title":"Getting started","text":"using Pkg\nPkg.add(\"Jutul\")\nPkg.add(\"JutulDarcy\")","category":"page"},{"location":"examples/intro/","page":"Getting started","title":"Getting started","text":"If you want the plotting used in the examples, you need this:","category":"page"},{"location":"examples/intro/","page":"Getting started","title":"Getting started","text":"Pkg.add(\"CairoMakie\")","category":"page"},{"location":"examples/intro/","page":"Getting started","title":"Getting started","text":"In addition, there is experimental 3D visualization and well plotting found as a conditional extension. To get access to these features, you need at least Julia 1.9 and the GLMakie package loaded.","category":"page"},{"location":"examples/intro/","page":"Getting started","title":"Getting started","text":"Pkg.add(\"GLMakie\")\nusing GLMakie","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"EditURL = \"../../../examples/two_phase_gravity_segregation.jl\"","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Gravity-segregation-example","page":"Gravity segregation","title":"Gravity segregation example","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"The simplest type of porous media simulation problem to set up that is not trivial is the transition to equilibrium from an unstable initial condition. Placing a heavy fluid on top of a lighter fluid will lead to the heavy fluid moving down while the lighter fluid moves up.","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Problem-set-up","page":"Gravity segregation","title":"Problem set up","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"We define a simple 1D gravity column with an approximate 10-1 ratio in density between the two compressible phases and let it simulate until equilibrium is reached.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"using JutulDarcy, Jutul\nnc = 100\ndomain = get_1d_reservoir(nc, z_max = 1)","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Fluid-properties","page":"Gravity segregation","title":"Fluid properties","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"Define two phases liquid and vapor with a 10-1 ratio reference densities and set up the simulation model.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"Darcy, bar, kg, meter, day = si_units(:darcy, :bar, :kilogram, :meter, :day)\np0 = 100*bar\n\nrhoLS = 1000.0*kg/meter^3\nrhoVS = 100.0*kg/meter^3\ncl, cv = 1e-5/bar, 1e-4/bar\nL, V = LiquidPhase(), VaporPhase()\nsys = ImmiscibleSystem([L, V])\nmodel = SimulationModel(domain, sys)","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Definition-for-phase-mass-densities","page":"Gravity segregation","title":"Definition for phase mass densities","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"Replace default density with a constant compressibility function that uses the reference values at the initial pressure.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"density = ConstantCompressibilityDensities(sys, p0, [rhoLS, rhoVS], [cl, cv])\nset_secondary_variables!(model, PhaseMassDensities = density)","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Set-up-initial-state","page":"Gravity segregation","title":"Set up initial state","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"Put heavy phase on top and light phase on bottom. Saturations have one value per phase, per cell and consequently a per-cell instantiation will require a two by number of cells matrix as input.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"nl = nc ÷ 2\nsL = vcat(ones(nl), zeros(nc - nl))'\ns0 = vcat(sL, 1 .- sL)\nstate0 = setup_state(model, Pressure = p0, Saturations = s0)","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"Convert time-steps from days to seconds","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"timesteps = repeat([0.02]*day, 150)","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"# Perform simulation\nstates, report = simulate(state0, model, timesteps, info_level = -1)","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Plot-results","page":"Gravity segregation","title":"Plot results","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"The 1D nature of the problem allows us to plot all timesteps simultaneously in 2D. We see that the heavy fluid, colored blue, is initially at the top of the domain and the lighter fluid is at the bottom. These gradually switch places until all the heavy fluid is at the lower part of the column.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"using CairoMakie\ntmp = vcat(map((x) -> x[:Saturations][1, :]', states)...)\nf = Figure()\nax = Axis(f[1, 1], xlabel = \"Time\", ylabel = \"Depth\", title = \"Gravity segregation\")\nhm = heatmap!(ax, tmp, colormap = :seismic)\nColorbar(f[1, 2], hm)\nf","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Example-on-GitHub","page":"Gravity segregation","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"usage/systems/#Supported-physical-systems","page":"Supported physical systems","title":"Supported physical systems","text":"","category":"section"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"JutulDarcy supports a number of different systems. These are JutulSystem instances that describe a particular type of physics for porous media flow. We describe these in roughly the order of complexity that they can model.","category":"page"},{"location":"usage/systems/#Summary","page":"Supported physical systems","title":"Summary","text":"","category":"section"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"The general form of the flow systems we will discuss is a conservation law for N components on residual form:","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"R = fracpartialpartial t M_i + nabla cdot vecV_i - Q_i quad forall i in 1 dots N","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"Here, M_i is the conserved quantity (usually masses) for component i and vecV_i the velocity of the conserved quantity. Q_i represents source terms that come from direct sources SourceTerm, boundary conditions (FlowBoundaryCondition) or from wells (setup_well, setup_vertical_well).","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"The following table gives an overview of the available features that are described in more detail below:","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"System Number of phases Number of components M V\nSinglePhaseSystem 1 1 rho phi rho vecv\nImmiscibleSystem Any (Any) S_alpha rho_alpha phi rho_alpha vecv_alpha\nStandardBlackOilSystem 2-3 (2-3) rho_o^s(b_g S_g + R_s b_o S_o) b_g vecv_g + R_s b_g vecv_o\nMultiPhaseCompositionalSystemLV 2-3 Any rho_l X_i S_l + rho_v Y_i S_v rho_l X_i vecv_l + rho_v Y_i vecv_v","category":"page"},{"location":"usage/systems/#Implementation-details","page":"Supported physical systems","title":"Implementation details","text":"","category":"section"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"In the above the discrete version of M_i is implemented in the update function for TotalMasses that should by convention be named update_total_masses!. The discrete component fluxes are implemented by component_mass_fluxes!. The source terms are implemented by apply_forces_to_equation! for boundary conditions and sources, and update_cross_term_in_entity! for wells. We use Julia's multiple dispatch to pair the right implementation with the right physics system.","category":"page"},{"location":"usage/systems/#Single-phase-flow","page":"Supported physical systems","title":"Single-phase flow","text":"","category":"section"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"The simplest form of porous media flow is the single-phase system.","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"r(p) = fracpartialpartial t( rho phi) + nabla cdot (rho vecv) - rho q","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"rho is the phase mass density and phi the apparent porosity of the medium, i.e. the void space in the rock available to flow. Where the velocity vecv is given by Darcy's law that relates the the pressure gradient nabla p and hydrostatic head to the velocity field:","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"vecv = - fracmathbfKmu (nabla p + rho g nabla z)","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"Here, mathbfK is a positive-definite permeability tensor, mu the fluid viscosity, g the magnitude of gravity oriented down and z the depth. ","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"note: Single-phase implementation\nThe SinglePhaseSystem is a dedicated single phase system. This is mathematically equivalent to an ImmiscibleSystem when set up with a single phase. For single phase flow, the fluid Pressure is the primary variable in each cell. The equation supports two types of compressibility: That of the fluid where density is a function rho(p) of pressure and that of the pores where the porosity phi(p) changes with pressure.","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"tip: Tip\nJutulDarcy uses the notion of depth rather than coordinate when defining buoyancy forces. This is consistent with the convention in the literature on subsurface flow.","category":"page"},{"location":"usage/systems/#Multi-phase,-immiscible-flow","page":"Supported physical systems","title":"Multi-phase, immiscible flow","text":"","category":"section"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"The flow systems immediately become more interesting if we add more phases. We can extend the above single-phase system by introducing the phase saturation of phase with label alpha as S_alpha. The phase saturation represents the volumetric fraction of the rock void space occupied by the phase. If we consider a pair of phases n w non-wetting and wetting we can write the system as","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"r_alpha = fracpartialpartial t (S_alpha rho_alpha phi) + nabla cdot (rho_alpha vecv_alpha) - rho_alpha q_alpha = 0 quad alpha in n w","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"This requires an additional closure such that the amount of saturation of all phases exactly fills the available fluid volume:","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"S_w + S_n = 1 quad 1 ge S_alpha ge 0 quad alpha in n w","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"This equation is local and linear in the saturations and can be eliminated to produce the classical two-equation system for two-phase flow,","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"r_n = fracpartialpartial t ((1 - S_w) rho_n phi) + nabla cdot (rho_n vecv_n) - rho_n q_n = 0\nr_w = fracpartialpartial t (S_w rho_w phi) + nabla cdot (rho_w vecv_w) - rho_w q_w = 0","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"To complete this description we also need expressions for the phase fluxes. We use the standard multiphase extension of Darcy's law,","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"vecv_alpha = - mathbfK frack_ralphamu_alpha (nabla palpha + rho_alpha g nabla z)","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"Here, we have introduced the relative permeability of the phase k_ralpha, an empirical relationship between the saturation and the flow rate. Relative permeability is a complex topic with many different relationships and functional forms, but we limit the discussion to monotone, non-negative functions of their respective saturations, for example a simple Brooks-Corey type of k_ralpha(S_alpha) = S_alpha^2. We have also introduced separate phase pressures p_alpha that account for capillary pressure, e.g. p_w = p_n + p_c(S_w).","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"note: Immiscible implementation\nThe ImmiscibleSystem implements this system for any number of phases. The primary variables for this system is a single reference Pressure and phase Saturations. As we do not solve for the volume closure equation, there is one less degree of freedom associated with the saturations than there are number of phases.","category":"page"},{"location":"usage/systems/#Black-oil:-Multi-phase,-pseudo-compositional-flow","page":"Supported physical systems","title":"Black-oil: Multi-phase, pseudo-compositional flow","text":"","category":"section"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"The black-oil equations is an extension of the immiscible description to handle limited miscibility between the phases. Originally developed for certain types of oil and gas simulation, these equations are useful when the number of components is low and tabulated values for dissolution and vaporization are available.","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"The assumptions of the black-oil model is that the \"oil\" and \"gas\" pseudo-components have uniform composition throughout the domain. JutulDarcy supports two- and three-phase black oil flow. The difference between two and three phases amounts to an additional immiscible aqueous phase that is identical to that of the previous section. For that reason, we focus on the miscible pseudo-components:","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"r_o = rho_o^s left( fracpartialpartial t( (b_o S_o + R_v b_g (1 - S_o)) phi) + nabla cdot ( b_o vecv_o + R_v b_o vecv_g) - q_o^s right ) \nr_g = rho_g^s left( fracpartialpartial t( (b_g S_g + R_s b_o S_o) phi) + nabla cdot ( b_g vecv_g + R_s b_g vecv_o) - q_g^s right )","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"The model uses the notion of surface (or reference densities) rho_o^s rho_g^s to define the densities of the component at specific pressure and temperature conditions where it is assumed that all \"gas\" has moved to the vapor phase and the defined \"oil\" is only found in the liquid phase. Keeping this definition in mind, the above equations can be divided by the surface densities to produce a surface volume balance equation where we have defined b_o and b_g as the dimensionless reciprocal formation volume factors that relate a volume at reservoir conditions to surface volumes and R_s for the dissolved volume of gas in the oil phase when brought to surface conditions. R_v is the same definition, but for oil vaporized into the gas phase.","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"note: Blackoil implementation\nThe StandardBlackOilSystem implements the black-oil equations. It is possible to run cases with and without water, with and without R_s and with and without R_v. The primary variables for the most general case is the reference Pressure, an ImmiscibleSaturation for the aqueous phase and the special BlackOilUnknown that will represent either S_o, R_s or R_v on a cell-by-cell basis depending on what phases are present and saturated.","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"A full description of the black-oil equations is outside the scope of this documentation. Please see Lie, An Introduction to Reservoir Simulation Using MATLAB/GNU Octave, Cambridge University Press, 2019 for more details.","category":"page"},{"location":"usage/systems/#Compositional:-Multi-phase,-multi-component-flow","page":"Supported physical systems","title":"Compositional: Multi-phase, multi-component flow","text":"","category":"section"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"The more general case of multi-component flow is often referred to as a compositional model. The typical version of this model describes the fluid as a system of N components where the phases present and fluid properties are determined by an equation-of-state. This can be highly accurate if the equation-of-state is tuned for the mixtures that are encountered, but comes at a significant computational cost as the equation-of-state must be evaluated many times.","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"JutulDarcy implements a standard compositional model that assumes local instantaneous equilibrium and that the components are present in up to two phases with an optional immiscible phase added. This is sometimes referred to as a \"simple water\" or \"dead water\" description. By default the solvers use MultiComponentFlash.jl to solve thermodynamic equilibrium. This package implements the generalized cubic approach and defaults to Peng-Robinson.","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"Assume that we have two phases liquid and vapor referred to as l and v with the Darcy flux given as in the preceeding sections. We can then write the residual equation for each of the M components by the liquid and vapor mole fractions X_i Y_i`of that component as:","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"r_i = fracpartialpartial t left( (rho_l X_i S_l + rho_v Y_i S_v) phi right) + nabla cdot (rho_l X_i vecv_l + rho_v Y_i vecv_v) - Q_i quad M in 1 dots M","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"For additional details, please see Chapter 8 - Compositional Simulation with the AD-OO Framework Advanced Modeling with the MATLAB Reservoir Simulation Toolbox, Møyner, 2021.","category":"page"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"note: Compositional implementation\nThe MultiPhaseCompositionalSystemLV implements the compositional model. The primary variables for the most general case is the reference Pressure, an ImmiscibleSaturation for the optional immiscible phase and M-1 OverallMoleFractions.","category":"page"},{"location":"usage/systems/#Thermal-flow","page":"Supported physical systems","title":"Thermal flow","text":"","category":"section"},{"location":"usage/systems/","page":"Supported physical systems","title":"Supported physical systems","text":"Currently experimental and undocumented. See ThermalSystem if you are feeling brave.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"EditURL = \"../../../examples/two_phase_buckley_leverett.jl\"","category":"page"},{"location":"examples/two_phase_buckley_leverett/#Buckley-Leverett-two-phase-problem","page":"Two-phase Buckley-Leverett","title":"Buckley-Leverett two-phase problem","text":"","category":"section"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"The Buckley-Leverett test problem is a classical reservoir simulation benchmark that demonstrates the nonlinear displacement process of a viscous fluid being displaced by a less viscous fluid, typically taken to be water displacing oil.","category":"page"},{"location":"examples/two_phase_buckley_leverett/#Problem-definition","page":"Two-phase Buckley-Leverett","title":"Problem definition","text":"","category":"section"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"This is a simple model without wells, where the flow is driven by a simple source term and a simple constant pressure boundary condition at the outlet. We define a function that sets up a two-phase system, a simple 1D domain and replaces the default relative permeability functions with quadratic functions:","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"k_ralpha(S) = min left(fracS - S_r1 - S_r 1right)^n S_r = 02 n = 2","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"In addition, the phase viscosities are treated as constant parameters of 1 and 5 centipoise for the displacing and resident fluids, respectively.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"The function is parametrized on the number of cells and the number of time-steps used to solve the model. This function, since it uses a relatively simple setup without wells, uses the Jutul functions directly.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"using JutulDarcy, Jutul\nfunction solve_bl(;nc = 100, time = 1.0, nstep = nc)\n    T = time\n    tstep = repeat([T/nstep], nstep)\n    domain = get_1d_reservoir(nc)\n    nc = number_of_cells(domain)\n    timesteps = tstep*3600*24\n    bar = 1e5\n    p0 = 100*bar\n    sys = ImmiscibleSystem((LiquidPhase(), VaporPhase()))\n    model = SimulationModel(domain, sys)\n    kr = BrooksCoreyRelPerm(sys, [2.0, 2.0], [0.2, 0.2])\n    replace_variables!(model, RelativePermeabilities = kr)\n    tot_time = sum(timesteps)\n    pv = pore_volume(domain)\n    irate = 500*sum(pv)/tot_time\n    src  = SourceTerm(1, irate, fractional_flow = [1.0, 0.0])\n    bc = FlowBoundaryCondition(nc, p0/2)\n    forces = setup_forces(model, sources = src, bc = bc)\n    parameters = setup_parameters(model, PhaseViscosities = [1e-3, 5e-3]) # 1 and 5 cP\n    state0 = setup_state(model, Pressure = p0, Saturations = [0.0, 1.0])\n    states, report = simulate(state0, model, timesteps,\n        forces = forces, parameters = parameters, info_level = -1)\n    return states, model, report\nend","category":"page"},{"location":"examples/two_phase_buckley_leverett/#Run-the-base-case","page":"Two-phase Buckley-Leverett","title":"Run the base case","text":"","category":"section"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"We solve a small model with 100 cells and 100 steps to serve as the baseline.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"n, n_f = 100, 1000\nstates, model, report = solve_bl(nc = n)\nprint_stats(report)","category":"page"},{"location":"examples/two_phase_buckley_leverett/#Run-refined-version-(1000-cells,-1000-steps)","page":"Two-phase Buckley-Leverett","title":"Run refined version (1000 cells, 1000 steps)","text":"","category":"section"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"Using a grid with 100 cells will not yield a fully converged solution. We can increase the number of cells at the cost of increasing the runtime a bit. Note that most of the time is spent in the linear solver, which uses a direct sparse LU factorization by default. For larger problems it is recommended to use an iterative solver.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"states_refined, _, report_refined = solve_bl(nc = n_f);\nprint_stats(report_refined)","category":"page"},{"location":"examples/two_phase_buckley_leverett/#Plot-results","page":"Two-phase Buckley-Leverett","title":"Plot results","text":"","category":"section"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"We plot the saturation front for the base case at different times together with the final solution for the refined model. In this case, refining the grid by a factor 10 gave us significantly less smearing of the trailing front.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"using CairoMakie\nx = range(0, stop = 1, length = n)\nx_f = range(0, stop = 1, length = n_f)\nf = Figure()\nax = Axis(f[1, 1], ylabel = \"Saturation\", title = \"Buckley-Leverett\")\nfor i in 1:6:length(states)\n    lines!(ax, x, states[i][:Saturations][1, :], color = :darkgray)\nend\nlines!(ax, x_f, states_refined[end][:Saturations][1, :], color = :red)\nf","category":"page"},{"location":"examples/two_phase_buckley_leverett/#Example-on-GitHub","page":"Two-phase Buckley-Leverett","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"EditURL = \"../../../examples/optimize_simple_bl.jl\"","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"using Jutul\nusing JutulDarcy\nusing LinearAlgebra\nusing CairoMakie","category":"page"},{"location":"examples/optimize_simple_bl/#Example-demonstrating-optimzation-of-parameters-against-observations","page":"Parameter optimization of Buckley-Leverett","title":"Example demonstrating optimzation of parameters against observations","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"We create a simple test problem: A 1D nonlinear displacement. The observations are generated by solving the same problem with the true parameters. We then match the parameters against the observations using a different starting guess for the parameters, but otherwise the same physical description of the system.","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"function setup_bl(;nc = 100, time = 1.0, nstep = 100, poro = 0.1, perm = 9.8692e-14)\n    T = time\n    tstep = repeat([T/nstep], nstep)\n    G = get_1d_reservoir(nc, poro = poro, perm = perm)\n    nc = number_of_cells(G)\n\n    bar = 1e5\n    p0 = 1000*bar\n    sys = ImmiscibleSystem((LiquidPhase(), VaporPhase()))\n    model = SimulationModel(G, sys)\n    model.primary_variables[:Pressure] = Pressure(minimum = -Inf, max_rel = nothing)\n    kr = BrooksCoreyRelPerm(sys, [2.0, 2.0])\n    replace_variables!(model, RelativePermeabilities = kr)\n    tot_time = sum(tstep)\n\n    parameters = setup_parameters(model, PhaseViscosities = [1e-3, 5e-3]) # 1 and 5 cP\n    state0 = setup_state(model, Pressure = p0, Saturations = [0.0, 1.0])\n\n    irate = 100*sum(parameters[:FluidVolume])/tot_time\n    src  = [SourceTerm(1, irate, fractional_flow = [1.0-1e-3, 1e-3]),\n            SourceTerm(nc, -irate, fractional_flow = [1.0, 0.0])]\n    forces = setup_forces(model, sources = src)\n\n    return (model, state0, parameters, forces, tstep)\nend","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"Number of cells and time-steps","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"N = 100\nNt = 100\nporo_ref = 0.1\nperm_ref = 9.8692e-14","category":"page"},{"location":"examples/optimize_simple_bl/#Set-up-and-simulate-reference","page":"Parameter optimization of Buckley-Leverett","title":"Set up and simulate reference","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"model_ref, state0_ref, parameters_ref, forces, tstep = setup_bl(nc = N, nstep = Nt, poro = poro_ref, perm = perm_ref)\nstates_ref, = simulate(state0_ref, model_ref, tstep, parameters = parameters_ref, forces = forces, info_level = -1)","category":"page"},{"location":"examples/optimize_simple_bl/#Set-up-another-case-where-the-porosity-is-different","page":"Parameter optimization of Buckley-Leverett","title":"Set up another case where the porosity is different","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"model, state0, parameters, = setup_bl(nc = N, nstep = Nt, poro = 2*poro_ref, perm = 1.0*perm_ref)\nstates, rep = simulate(state0, model, tstep, parameters = parameters, forces = forces, info_level = -1)","category":"page"},{"location":"examples/optimize_simple_bl/#Plot-the-results","page":"Parameter optimization of Buckley-Leverett","title":"Plot the results","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"fig = Figure()\nax = Axis(fig[1, 1], title = \"Saturation\")\nlines!(ax, states_ref[end][:Saturations][1, :], label = \"Reference\")\nlines!(ax, states[end][:Saturations][1, :], label = \"Initial guess\")\naxislegend(ax)\nax = Axis(fig[1, 2], title = \"Pressure\")\nlines!(ax, states_ref[end][:Pressure], label = \"Reference\")\nlines!(ax, states[end][:Pressure], label = \"Initial guess\")\naxislegend(ax)\nfig","category":"page"},{"location":"examples/optimize_simple_bl/#Define-objective-function","page":"Parameter optimization of Buckley-Leverett","title":"Define objective function","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"Define objective as mismatch between water saturation in current state and reference state. The objective function is currently a sum over all time steps. We implement a function for one term of this sum.","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"function mass_mismatch(m, state, dt, step_no, forces)\n    state_ref = states_ref[step_no]\n    fld = :Saturations\n    val = state[fld]\n    ref = state_ref[fld]\n    err = 0\n    for i in axes(val, 2)\n        err += (val[1, i] - ref[1, i])^2\n    end\n    return dt*err\nend\n@assert Jutul.evaluate_objective(mass_mismatch, model, states_ref, tstep, forces) == 0.0\n@assert Jutul.evaluate_objective(mass_mismatch, model, states, tstep, forces) > 0.0","category":"page"},{"location":"examples/optimize_simple_bl/#Set-up-a-configuration-for-the-optimization.-This-by-default-enables-all-parameters-for","page":"Parameter optimization of Buckley-Leverett","title":"Set up a configuration for the optimization. This by default enables all parameters for","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"optimization, with relative box limits 0.1 and 10 specified here. If use_scaling is enabled the variables in the optimization are scaled so that their actual limits are approximately box limits.","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"We are not interested in matching gravity effects or viscosity here. Transmissibilities are derived from permeability and varies significantly. We can set log scaling to get a better conditioned optimization system, without changing the limits or the result.","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"cfg = optimization_config(model, parameters, use_scaling = true, rel_min = 0.1, rel_max = 10)\nfor (ki, vi) in cfg\n    if ki in [:TwoPointGravityDifference, :PhaseViscosities]\n        vi[:active] = false\n    end\n    if ki == :Transmissibilities\n        vi[:scaler] = :log\n    end\nend\nprint_obj = 100","category":"page"},{"location":"examples/optimize_simple_bl/#Set-up-parameter-optimization.","page":"Parameter optimization of Buckley-Leverett","title":"Set up parameter optimization.","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"This gives us a set of function handles together with initial guess and limits. Generally calling either of the functions will mutate the data Dict. The options are: Fo(x) -> evaluate objective dFo(dFdx, x) -> evaluate gradient of objective, mutating dFdx (may trigger evaluation of Fo) Fand_dF(F, dFdx, x) -> evaluate F and/or dF. Value of nothing will mean that the corresponding entry is skipped.","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"F_o, dF_o, F_and_dF, x0, lims, data = setup_parameter_optimization(model, state0, parameters, tstep, forces, mass_mismatch, cfg, print = print_obj, param_obj = true);\nF_initial = F_o(x0)\ndF_initial = dF_o(similar(x0), x0)\n@info \"Initial objective: $F_initial, gradient norm $(norm(dF_initial))\"","category":"page"},{"location":"examples/optimize_simple_bl/#Link-to-an-optimizer-package","page":"Parameter optimization of Buckley-Leverett","title":"Link to an optimizer package","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"We use Optim.jl but the interface is general enough that e.g. LBFGSB.jl can easily be swapped in.","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"LBFGS is a good choice for this problem, as Jutul provides sensitivities via adjoints that are inexpensive to compute.","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"using Optim\nlower, upper = lims\ninner_optimizer = LBFGS()\nopts = Optim.Options(store_trace = true, show_trace = true, time_limit = 30)\nresults = optimize(Optim.only_fg!(F_and_dF), lower, upper, x0, Fminbox(inner_optimizer), opts)\nx = results.minimizer\ndisplay(results)\nF_final = F_o(x)","category":"page"},{"location":"examples/optimize_simple_bl/#Compute-the-solution-using-the-tuned-parameters-found-in-x.","page":"Parameter optimization of Buckley-Leverett","title":"Compute the solution using the tuned parameters found in x.","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"parameters_t = deepcopy(parameters)\ndevectorize_variables!(parameters_t, model, x, data[:mapper], config = data[:config])\nx_truth = vectorize_variables(model_ref, parameters_ref, data[:mapper], config = data[:config])\n\nstates_tuned, = simulate(state0, model, tstep, parameters = parameters_t, forces = forces, info_level = -1);\nnothing","category":"page"},{"location":"examples/optimize_simple_bl/#Plot-final-parameter-spread","page":"Parameter optimization of Buckley-Leverett","title":"Plot final parameter spread","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"@info \"Final residual $F_final (down from $F_initial)\"\nfig = Figure()\nax1 = Axis(fig[1, 1], title = \"Scaled parameters\", ylabel = \"Value\")\nscatter!(ax1, x, label = \"Final X\")\nscatter!(ax1, x0, label = \"Initial X\")\nlines!(ax1, lower, label = \"Lower bound\")\nlines!(ax1, upper, label = \"Upper bound\")\naxislegend()\nfig","category":"page"},{"location":"examples/optimize_simple_bl/#Plot-the-final-solutions.","page":"Parameter optimization of Buckley-Leverett","title":"Plot the final solutions.","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"Note that we only match saturations - so any match in pressure is not guaranteed.","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"fig = Figure()\nax = Axis(fig[1, 1], title = \"Saturation\")\nlines!(ax, states_ref[end][:Saturations][1, :], label = \"Reference\")\nlines!(ax, states[end][:Saturations][1, :], label = \"Initial guess\")\nlines!(ax, states_tuned[end][:Saturations][1, :], label = \"Tuned\")\n\naxislegend(ax)\nax = Axis(fig[1, 2], title = \"Pressure\")\nlines!(ax, states_ref[end][:Pressure], label = \"Reference\")\nlines!(ax, states[end][:Pressure], label = \"Initial guess\")\nlines!(ax, states_tuned[end][:Pressure], label = \"Tuned\")\naxislegend(ax)\nfig","category":"page"},{"location":"examples/optimize_simple_bl/#Plot-the-objective-history-and-function-evaluations","page":"Parameter optimization of Buckley-Leverett","title":"Plot the objective history and function evaluations","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"fig = Figure()\nax1 = Axis(fig[1, 1], yscale = log10, title = \"Objective evaluations\", xlabel = \"Iterations\", ylabel = \"Objective\")\nplot!(ax1, data[:obj_hist][2:end])\nax2 = Axis(fig[1, 2], yscale = log10, title = \"Outer optimizer\", xlabel = \"Iterations\", ylabel = \"Objective\")\nt = map(x -> x.value, Optim.trace(results))\nplot!(ax2, t)\ndisplay(fig)","category":"page"},{"location":"examples/optimize_simple_bl/#Example-on-GitHub","page":"Parameter optimization of Buckley-Leverett","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"","category":"page"},{"location":"examples/optimize_simple_bl/","page":"Parameter optimization of Buckley-Leverett","title":"Parameter optimization of Buckley-Leverett","text":"This page was generated using Literate.jl.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [JutulDarcy]","category":"page"},{"location":"internals/#JutulDarcy.MIN_ACTIVE_WELL_RATE","page":"Internals","title":"JutulDarcy.MIN_ACTIVE_WELL_RATE","text":"(Absolute) Minimum well rate for a well that is not disabled.\n\n\n\n\n\n","category":"constant"},{"location":"internals/#JutulDarcy.MIN_INITIAL_WELL_RATE","page":"Internals","title":"JutulDarcy.MIN_INITIAL_WELL_RATE","text":"(Absolute) Minimum initial rate for wells when controls are updated.\n\n\n\n\n\n","category":"constant"},{"location":"internals/#JutulDarcy.BlackOilX-Tuple{StandardBlackOilSystem{<:Any, <:Any, <:Any, <:Any, :varswitch}, Any}","page":"Internals","title":"JutulDarcy.BlackOilX","text":"BlackOilX(sys::BlackOilVariableSwitchingSystem, p; sw = 0.0, so = 0.0, sg = 0.0, rs = 0.0, rv = 0.0)\n\nHigh level initializer for the black oil unknown degree of freedom. Will try to fill in the gaps unless system is really underspecified.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.CPRPreconditioner","page":"Internals","title":"JutulDarcy.CPRPreconditioner","text":"CPRPreconditioner(p = default_psolve(), s = ILUZeroPreconditioner(); strategy = :quasi_impes, weight_scaling = :unit, update_frequency = 1, update_interval = :iteration, partial_update = true)\n\nConstruct a constrained pressure residual (CPR) preconditioner.\n\nBy default, this is a AMG-BILU(0) version (algebraic multigrid for pressure, block-ILU(0) for the global system).\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.CPRPreconditioner-2","page":"Internals","title":"JutulDarcy.CPRPreconditioner","text":"Constrained pressure residual\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.DisabledControl","page":"Internals","title":"JutulDarcy.DisabledControl","text":"DisabledControl()\n\nControl that disables a well. If a well is disabled, it is disconnected from the surface network and no flow occurs between the well and the top side. Mass transfer can still occur inside the well, and between the well and the reservoir.\n\nSee also ProducerControl, InjectorControl.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.DisabledTarget","page":"Internals","title":"JutulDarcy.DisabledTarget","text":"DisabledTarget(q)\n\nDisabled target used when a well is under DisabledControl() only.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.FlowBoundaryCondition","page":"Internals","title":"JutulDarcy.FlowBoundaryCondition","text":"FlowBoundaryCondition(\ncell,\npressure = DEFAULT_MINIMUM_PRESSURE, \ntemperature = 298.15;\nfractional_flow = nothing,\ndensity = nothing,\ntrans_flow = 1e-12,\ntrans_thermal = 1e-6\n)\n\nBoundary condition for constant values (pressure/temperature)\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.HistoricalReservoirVoidageTarget","page":"Internals","title":"JutulDarcy.HistoricalReservoirVoidageTarget","text":"HistoricalReservoirVoidageTarget(q, weights)\n\nHistorical RESV target for history matching cases.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.ImmiscibleSaturation","page":"Internals","title":"JutulDarcy.ImmiscibleSaturation","text":"A single saturation that represents the \"other\" phase in a three phase compositional system where two phases are predicted by an EoS\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.ImmiscibleSystem-Tuple{Any}","page":"Internals","title":"JutulDarcy.ImmiscibleSystem","text":"ImmiscibleSystem(phases; reference_densities = ones(length(phases)))\nImmiscibleSystem((LiquidPhase(), VaporPhase()), (1000.0, 700.0))\n\nSet up an immiscible system for the given phases with optional reference densitites. This system is easy to specify with Pressure and Saturations as the default primary variables. Immiscible system assume that there is no mass transfer between phases and that a phase is uniform in composition.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.InjectorControl","page":"Internals","title":"JutulDarcy.InjectorControl","text":"InjectorControl(target, mix, [density])\n\nWell control that specifies injection into the reservoir. target specifies the type of target and mix defines the injection mass fractions for all species in the model during injection. \n\nFor example, for a three-component system made up of CO2, H2O and H2, setting [0.1, 0.6, 0.3] would mean that the injection stream would contain 1 part CO2, 6 parts H2O and 3 parts H2 by mass. For an immiscible system (e.g. LiquidPhase(), VaporPhase()) the species corresponds to phases and [0.3, 0.7] would mean a 3 to 7 mixture of liquid and vapor by mass.\n\nThe density of the injected fluid at surface conditions is given by density which is defaulted to 1.0 if not given.\n\nSee also ProducerControl, DisabledControl.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.MinimalTPFAGrid","page":"Internals","title":"JutulDarcy.MinimalTPFAGrid","text":"MinimalTPFAGrid(ϕ, N)\n\nGenerate a minimal grid suitable only for two-point flux discretization (TPFA) for given pore-volumes ϕ and a neighborship matrix N with size (2, n) where n is the number of internal faces.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.MixedWellSegmentFlow","page":"Internals","title":"JutulDarcy.MixedWellSegmentFlow","text":"Two point approximation with flux for wells\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.MultiPhaseCompositionalSystemLV","page":"Internals","title":"JutulDarcy.MultiPhaseCompositionalSystemLV","text":"MultiPhaseCompositionalSystemLV(equation_of_state, phases = (LiquidPhase(), VaporPhase()); reference_densities = ones(length(phases)), other_name = \"Water\")\n\nSet up a compositional system for a given equation_of_state from MultiComponentFlash.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.MultiSegmentWell-Tuple{Any, AbstractVector, Any}","page":"Internals","title":"JutulDarcy.MultiSegmentWell","text":"MultiSegmentWell(reservoir_cells, volumes, centers;\n                N = nothing,\n                name = :Well,\n                perforation_cells = nothing,\n                segment_models = nothing,\n                segment_length = nothing,\n                reference_depth = 0,\n                dz = nothing,\n                surface_conditions = default_surface_cond(),\n                accumulator_volume = mean(volumes),\n                )\n\nCreate well perforated in a vector of reservoir_cells with corresponding volumes and cell centers.\n\nNOTE: setup_vertical_well or setup_well are the recommended way of setting up wells.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.OverallMoleFractions-Tuple{}","page":"Internals","title":"JutulDarcy.OverallMoleFractions","text":"OverallMoleFractions(;dz_max = 0.2)\n\nOverall mole fractions definition for compositional. dz_max is the maximum allowable change in any composition during a single Newton iteration.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.Perforations","page":"Internals","title":"JutulDarcy.Perforations","text":"Perforations are connections from well cells to reservoir vcells\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.PhaseMassDensities","page":"Internals","title":"JutulDarcy.PhaseMassDensities","text":"Mass density of each phase\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.Pressure-Tuple{}","page":"Internals","title":"JutulDarcy.Pressure","text":"Pressure(; max_abs = nothing, max_rel = 0.2, scale = 1e8, maximum = Inf, minimum = DEFAULT_MINIMUM_PRESSURE)\n\nPressure variable definition. max_abs/max_rel maximum allowable absolute/relative change over a Newton iteration, scale is a \"typical\" value used to regularize the linear system, maximum the largest possible value and minimum the smallest.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.ProducerControl","page":"Internals","title":"JutulDarcy.ProducerControl","text":"ProducerControl(target)\n\nWell control for production out of the reservoir. target specifies the type of target (for example BottomHolePressureTarget()).\n\nSee also DisabledControl, InjectorControl.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.ReservoirRelativePermeability","page":"Internals","title":"JutulDarcy.ReservoirRelativePermeability","text":"Interpolated multiphase rel. perm. that is simple (single region, no magic for more than two phases)\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.ReservoirVoidageTarget","page":"Internals","title":"JutulDarcy.ReservoirVoidageTarget","text":"ReservoirVoidageTarget(q, weights)\n\nRESV targets with weights for each pseudo-component\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.Saturations-Tuple{}","page":"Internals","title":"JutulDarcy.Saturations","text":"Saturations(;ds_max = 0.2)\n\nSaturations as primary variable. ds_max controls maximum allowable saturation change between two Newton iterations.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.SegmentWellBoreFrictionHB","page":"Internals","title":"JutulDarcy.SegmentWellBoreFrictionHB","text":"Hagedorn and Brown well bore friction model for a segment.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.SimpleWell-Tuple{Any}","page":"Internals","title":"JutulDarcy.SimpleWell","text":"SimpleWell(reservoir_cells)\n\nSet up a simple well.\n\nNOTE: setup_vertical_well or setup_well are the recommended way of setting up wells.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.SinglePhaseRateTarget","page":"Internals","title":"JutulDarcy.SinglePhaseRateTarget","text":"SinglePhaseRateTarget(q, phase)\n\nSingle-phase well target with value q specified for phase.\n\nExamples\n\njulia> SinglePhaseRateTarget(0.001, LiquidPhase())\nSinglePhaseRateTarget of 0.001 [m^3/s] for LiquidPhase()\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.SinglePhaseSystem","page":"Internals","title":"JutulDarcy.SinglePhaseSystem","text":"SinglePhaseSystem(phase = LiquidPhase(); reference_density = 1.0)\n\nA single-phase system that only solves for pressure.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.SourceTerm-Tuple{Any, Any}","page":"Internals","title":"JutulDarcy.SourceTerm","text":"SourceTerm(cell, value; fractional_flow = [1.0], type = MassSource)\n\nCreate source term in given cell with given total value. The optional fractional_flow argument controls how this term is divided over components if used for inflow.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.StandardBlackOilSystem-Union{Tuple{}, Tuple{RV}, Tuple{RS}} where {RS, RV}","page":"Internals","title":"JutulDarcy.StandardBlackOilSystem","text":"StandardBlackOilSystem(; rs_max = nothing,\n                         rv_max = nothing,\n                         phases = (AqueousPhase(), LiquidPhase(), VaporPhase()),\n                         reference_densities = [786.507, 1037.84, 0.969758])\n\nSet up a standard black-oil system. Keyword arguments rs_max and rv_max can either be nothing or callable objects / functions for the maximum Rs and Rv as a function of pressure. phases can be specified together with reference_densities for each phase. \n\nNOTE: For the black-oil model, the reference densities significantly impact many aspects of the PVT behavior. These should generally be set consistently with the other properties.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.SurfaceGasRateTarget","page":"Internals","title":"JutulDarcy.SurfaceGasRateTarget","text":"SurfaceGasRateTarget(q)\n\nWell target of specified gas rate with value q at surface conditions.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.SurfaceLiquidRateTarget","page":"Internals","title":"JutulDarcy.SurfaceLiquidRateTarget","text":"SurfaceLiquidRateTarget(q)\n\nWell target of specified liquid rate with value q (liquid/oil and water, but not gas) at surface conditions.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.SurfaceOilRateTarget","page":"Internals","title":"JutulDarcy.SurfaceOilRateTarget","text":"SurfaceOilRateTarget(q)\n\nWell target of specified oil rate with value q at surface conditions.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.SurfaceWaterRateTarget","page":"Internals","title":"JutulDarcy.SurfaceWaterRateTarget","text":"SurfaceWaterRateTarget(q)\n\nWell target of specified water rate with value q at surface conditions.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.TabulatedRelPermSimple","page":"Internals","title":"JutulDarcy.TabulatedRelPermSimple","text":"Interpolated multiphase rel. perm. that is simple (single region, no magic for more than two phases)\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.TotalRateTarget","page":"Internals","title":"JutulDarcy.TotalRateTarget","text":"TotalRateTarget(q)\n\nWell target of specified total rate of all phases with value q at surface conditions.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.component_mass_fluxes!","page":"Internals","title":"JutulDarcy.component_mass_fluxes!","text":"component_mass_fluxes!(q, face, state, model, kgrad, upw)\n\nImplementation of component fluxes for a given system for a given face.\n\n\n\n\n\n","category":"function"},{"location":"internals/#JutulDarcy.full_well_outputs-Tuple{Any, Any, Any}","page":"Internals","title":"JutulDarcy.full_well_outputs","text":"full_well_outputs(model, states, forces; targets = available_well_targets(model.models.Reservoir), shortname = false)\n\nGet the full set of well outputs after a simulation has occured, for plotting or other post-processing.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.generate_phase_indices","page":"Internals","title":"JutulDarcy.generate_phase_indices","text":"generate_phase_indices(phases, canonical = (a = AqueousPhase(), l = LiquidPhase(), v = VaporPhase()))\n\nGenerate mapping for canonical ordering of phases.\n\n\n\n\n\n","category":"function"},{"location":"internals/#JutulDarcy.plot_reservoir_simulation_result-Tuple{MultiModel, ReservoirSimResult}","page":"Internals","title":"JutulDarcy.plot_reservoir_simulation_result","text":"plot_reservoir_simulation_result(model::MultiModel, res::ReservoirSimResult; wells = true, reservoir = true)\n\nPlot a reservoir simulation result. If wells=true well curves will be shown interactively. If reservoir=true the reservoir quantities will be visualized in 3D. These options can be combined.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.replace_target","page":"Internals","title":"JutulDarcy.replace_target","text":"replace_target(ctrl, new_target)\n\nCreate new well control using ctrl as a template that operates under new_target.\n\n\n\n\n\n","category":"function"},{"location":"internals/#JutulDarcy.reservoir_domain-Tuple{Any}","page":"Internals","title":"JutulDarcy.reservoir_domain","text":"reservoir_domain(g; permeability = convert_to_si(0.1, :darcy), porosity = 0.1, kwarg...)\n\nSet up a DataDomain instance for given mesh or other representation g. permeability and porosity are then added to the domain. If scalars are passed, they are expanded to cover all cells. Arrays are asserted to match all cells. Permeability is either one value per cell (diagonal scalar), one value per dimension given in each row (for a diagonal tensor) or a vector that represents a compact full tensor representation (6 elements in 3D, 3 in 2D).\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.reservoir_domain-Tuple{JutulCase}","page":"Internals","title":"JutulDarcy.reservoir_domain","text":"reservoir_domain(case::JutulCase)\n\nGet reservoir domain from a reservoir simulation case.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.reservoir_domain-Tuple{Union{MultiModel, SimulationModel}}","page":"Internals","title":"JutulDarcy.reservoir_domain","text":"reservoir_domain(m::Union{SimulationModel, MultiModel})\n\nGet reservoir domain embedded in model.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.reservoir_groups_for_printing-Tuple{MultiModel}","page":"Internals","title":"JutulDarcy.reservoir_groups_for_printing","text":"reservoir_groups_for_printing(model::MultiModel)\n\nBreak down the standard reservoir simulator model into groups based on if they are the reservoir, wells, facility or something else.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.reservoir_linsolve","page":"Internals","title":"JutulDarcy.reservoir_linsolve","text":"reservoir_linsolve(model, precond = :cpr; <keyword arguments>)\n\nSet up iterative linear solver for a reservoir model from setup_reservoir_model.\n\nArguments\n\nmodel: Reservoir model that will linearize the equations for the linear solver\nprecond=:cpr: Preconditioner type to use: Either :cpr (Constrained-Pressure-Residual) or :ilu0 (block-incomplete-LU) (no effect if solver = :direct).\nv=0: verbosity (can lead to a large amount of output)\nsolver=:bicgstab: the symbol of a Krylov.jl solver (typically :gmres or :bicgstab)\nupdate_interval=:once: how often the CPR AMG hierarchy is reconstructed (:once, :iteration, :ministep, :step)\nupdate_interval_partial=:iteration: how often the pressure system is updated in CPR\nmax_coarse: max size of coarse level if using AMG\ncpr_type=nothing: type of CPR (:true_impes, :quasi_impes or nothing for automatic)\npartial_update=true: perform partial update of CPR preconditioner outside of AMG update (see above)\nrtol=1e-3: relative tolerance for the linear solver\nmax_iterations=100: limit for linear solver iterations\n\nAdditional keywords are passed onto the linear solver constructor.\n\n\n\n\n\n","category":"function"},{"location":"internals/#JutulDarcy.reservoir_transmissibility-Tuple{DataDomain}","page":"Internals","title":"JutulDarcy.reservoir_transmissibility","text":"reservoir_transmissibility(d::DataDomain)\n\nSpecial transmissibility function for reservoir simulation that handles additional complexity present in industry grade models.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.setup_reservoir_forces-Tuple{MultiModel}","page":"Internals","title":"JutulDarcy.setup_reservoir_forces","text":"setup_reservoir_forces(model; control = nothing, limits = nothing, set_default_limits = true, <keyword arguments>)\n\nSet up driving forces for a reservoir model with wells\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.setup_reservoir_model-Tuple{DataDomain, Any}","page":"Internals","title":"JutulDarcy.setup_reservoir_model","text":"setup_reservoir_model(reservoir, system; wells = [], <keyword arguments>)\nsetup_reservoir_model(reservoir, system; wells = [], context = DefaultContext(), reservoir_context = nothing, backend = :csc, <keyword arguments>)\n\nSet up a reservoir MultiModel for a given reservoir DataDomain typically set up from  reservoir_domain and an optional vector of wells that are created using setup_vertical_well and  setup_well.\n\nThe routine automatically sets up a facility and couples the wells with the reservoir and that facility.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.setup_reservoir_simulator","page":"Internals","title":"JutulDarcy.setup_reservoir_simulator","text":"setup_reservoir_simulator(models, initializer, parameters = nothing; <keyword arguments>)\n\nArguments\n\nmodels: either a single model or a Dict with the key :Reservoir for multimodels\ninitializer: used to setup state0, must be compatible with model\nparameters: initialized parameters, must be compatible with model if provided\nlinear_solver=:bicgstab: iterative solver to use (provided model supports it)\nprecond=:cpr: preconditioner for iterative solver: Either :cpr or :ilu0.\nrtol=1e-3: relative tolerance for linear solver\ninitial_dt=3600*24.0: initial time-step in seconds (one day by default)\ntarget_its=8: target number of nonlinear iterations per time step\noffset_its=1: dampening parameter for time step selector where larger values lead to more pessimistic estimates.\ntol_cnv=1e-3: maximum allowable point-wise error (volume-balance)\ntol_mb=1e-7: maximum alllowable integrated error (mass-balance)\nspecialize=false: use deep specialization of storage for faster execution, but significantly more compile time\n\nAdditional keyword arguments are passed onto simulator_config.\n\n\n\n\n\n","category":"function"},{"location":"internals/#JutulDarcy.setup_reservoir_state-Tuple{MultiModel}","page":"Internals","title":"JutulDarcy.setup_reservoir_state","text":"setup_reservoir_state(model, <keyword arguments>)\n# Ex: For immiscible two-phase\nsetup_reservoir_state(model, Pressure = 1e5, Saturations = [0.2, 0.8])\n\nConvenience constructor that initializes a state for a MultiModel set up using setup_reservoir_model. The main convenience over setup_state is only the reservoir initialization values need be provided: wells are automatically initialized from the connected reservoir cells.\n\nAs an alternative to passing keyword arguments, a Dict{Symbol, Any} instance can be sent in as a second, non-keyword argument.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.setup_vertical_well-NTuple{4, Any}","page":"Internals","title":"JutulDarcy.setup_vertical_well","text":"setup_vertical_well(g, K, i, j; heel = 1, toe = grid_dims_ijk(g)[3], kwarg...)\n\nSet up a vertical well for given grid g and permeability K at logical indices i, j perforating all cells starting at k-logical index heel to toe.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.setup_vertical_well-Tuple{DataDomain, Any, Any}","page":"Internals","title":"JutulDarcy.setup_vertical_well","text":"setup_vertical_well(D::DataDomain, i, j; <kwarg>)\n\nSet up a vertical well with a DataDomain input that represents the porous medium / reservoir where the wells it to be placed.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.setup_well-Tuple{DataDomain, Any}","page":"Internals","title":"JutulDarcy.setup_well","text":"setup_well(D::DataDomain, reservoir_cells; skin = 0.0, Kh = nothing, radius = 0.1, dir = :z)\n\nSet up a well in reservoir_cells with given skin factor and radius. The order of cells matter as it is treated as a trajectory.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.simulate_data_file-Tuple{Any}","page":"Internals","title":"JutulDarcy.simulate_data_file","text":"simulate_data_file(inp; parse_arg = NamedTuple(), kwarg...)\n\nSimulate standard input file (with extension .DATA). inp can either be the output from setup_case_from_parsed_data or a String for the path of an input file.\n\nAdditional arguments are passed onto simulate_reservoir. Extra inputs to the parser can be sent as a parse_arg NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.simulate_mrst_case-Tuple{Any}","page":"Internals","title":"JutulDarcy.simulate_mrst_case","text":"simulate_mrst_case(file_name; kwarg...)\n\nSimulate a MRST case from file_name as exported by writeJutulInput in MRST.\n\nArguments\n\nfile_name::String: The path to a .mat file that is to be simulated.\nextra_outputs::Vector{Symbol} = [:Saturations]: Additional variables to output from the simulation.\nwrite_output::Bool = true: Write output (in the default JLD2 format)\noutput_path = nothing: Directory for output files. Files will be written under this directory. Defaults to the folder of file_name.\nwrite_mrst = true: Write MRST compatible output after completed simulation that can be read by readJutulOutput in MRST.\nbackend=:csc: choice of backend for linear systems. :csc for default Julia sparse, :csr for experimental parallel CSR.\nverbose=true: print some extra information specific to this routine upon calling\nnthreads=Threads.nthreads(): number of threads to use\nlinear_solver=:bicgstab: name of Krylov.jl solver to use, or :direct (for small cases only)\ninfo_level=0: standard Jutul info_level. 0 for minimal printing, -1 for no printing, 1-5 for various levels of verbosity\n\nAdditional input arguments are passed onto setup_reservoir_simulator and simulator_config if applicable.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.two_phase_compositional_mass!-NTuple{11, Any}","page":"Internals","title":"JutulDarcy.two_phase_compositional_mass!","text":"Update total masses for two-phase compositional where another immiscible phase is present\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.two_phase_compositional_mass!-Tuple{Any, Any, Nothing, Vararg{Any, 8}}","page":"Internals","title":"JutulDarcy.two_phase_compositional_mass!","text":"Update total masses for two-phase compositional\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.update_total_masses!","page":"Internals","title":"JutulDarcy.update_total_masses!","text":"update_total_masses!(totmass, tv, model, arg..., ix)\n\nUpdate total masses for a given system. Number of input arguments varies based on physical system under consideration.\n\n\n\n\n\n","category":"function"},{"location":"internals/#JutulDarcy.well_mismatch-NTuple{9, Any}","page":"Internals","title":"JutulDarcy.well_mismatch","text":"well_mismatch(qoi, wells, model_f, states_f, model_c, state_c, dt, step_no, forces; <keyword arguments>)\n\nCompute well mismatch for a set of qoi's (well targets) and a set of well symbols.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_output","page":"Internals","title":"JutulDarcy.well_output","text":"well_output(model, states, well_symbol, forces, target = BottomHolePressureTarget)\n\nGet a specific well output from a valid operational target once a simulation is completed an states are available.\n\n\n\n\n\n","category":"function"},{"location":"internals/#JutulDarcy.well_target-Tuple{Any, BottomHolePressureTarget, Vararg{Any, 4}}","page":"Internals","title":"JutulDarcy.well_target","text":"Well target contribution from well itself (bhp)\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_target-Tuple{Any, DisabledTarget, Vararg{Any, 4}}","page":"Internals","title":"JutulDarcy.well_target","text":"Well target contribution from well itself (disabled, zero value)\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_target-Tuple{InjectorControl, JutulDarcy.SurfaceVolumeTarget, Vararg{Any, 4}}","page":"Internals","title":"JutulDarcy.well_target","text":"Well target contribution from well itself (surface volume, injector)\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_target-Tuple{InjectorControl, TotalRateTarget, Vararg{Any, 4}}","page":"Internals","title":"JutulDarcy.well_target","text":"Well target contribution from well itself (surface volume, injector)\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_target-Tuple{ProducerControl, JutulDarcy.ReservoirVoidageTarget, Vararg{Any, 4}}","page":"Internals","title":"JutulDarcy.well_target","text":"Well target contribution from well itself (RESV, producer)\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_target-Tuple{ProducerControl, JutulDarcy.SurfaceVolumeTarget, Vararg{Any, 4}}","page":"Internals","title":"JutulDarcy.well_target","text":"Well target contribution from well itself (surface volume, producer)\n\n\n\n\n\n","category":"method"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"EditURL = \"../../../examples/co2_brine_2d_vertical.jl\"","category":"page"},{"location":"examples/co2_brine_2d_vertical/#Example-demonstrating-compositional-flow","page":"Intro to compositional flow","title":"Example demonstrating compositional flow","text":"","category":"section"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"This is a simple conceptual example demonstrating how to solve compositional flow. This example uses a two-component water-CO2 system. Note that the default Peng-Robinson is not accurate for this system without adjustments to the parameters. However, the example demonstrates the conceptual workflow for getting started with compositional simulation.","category":"page"},{"location":"examples/co2_brine_2d_vertical/#Set-up-mixture","page":"Intro to compositional flow","title":"Set up mixture","text":"","category":"section"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"We load the external flash package and define a two-component H2O-CO2 system. The constructor for each species takes in molecular weight, critical pressure, critical temperature, critical volume, acentric factor given as strict SI. This means, for instance, that molar masses are given in kg/mole and not g/mole or kg/kmol.","category":"page"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"using MultiComponentFlash\nh2o = MolecularProperty(0.018015268, 22.064e6, 647.096, 5.595e-05, 0.3442920843)\nco2 = MolecularProperty(0.0440098, 7.3773e6, 304.1282, 9.412e-05, 0.22394)\n\nbic = [0 0;\n       0 0]\n\nmixture = MultiComponentMixture([h2o, co2], A_ij = bic, names = [\"H2O\", \"CO2\"])\neos = GenericCubicEOS(mixture, PengRobinson())","category":"page"},{"location":"examples/co2_brine_2d_vertical/#Set-up-domain-and-wells","page":"Intro to compositional flow","title":"Set up domain and wells","text":"","category":"section"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"using Jutul, JutulDarcy, CairoMakie\nnx = 50\nny = 1\nnz = 20\ndims = (nx, ny, nz)\ng = CartesianMesh(dims, (100.0, 10.0, 10.0))\nnc = number_of_cells(g)\nDarcy, bar, kg, meter, Kelvin, day, sec = si_units(:darcy, :bar, :kilogram, :meter, :Kelvin, :day, :second)\nK = repeat([0.1, 0.1, 0.001]*Darcy, 1, nc)\nres = reservoir_domain(g, porosity = 0.3, permeability = K)","category":"page"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"Set up a vertical well in the first corner, perforated in top layer","category":"page"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"prod = setup_well(g, K, [(nx, ny, 1)], name = :Producer)","category":"page"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"Set up an injector in the opposite corner, perforated in bottom layer","category":"page"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"inj = setup_well(g, K, [(1, 1, nz)], name = :Injector)","category":"page"},{"location":"examples/co2_brine_2d_vertical/#Define-system-and-realize-on-grid","page":"Intro to compositional flow","title":"Define system and realize on grid","text":"","category":"section"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"rhoLS = 844.23*kg/meter^3\nrhoVS = 126.97*kg/meter^3\nrhoS = [rhoLS, rhoVS]\nL, V = LiquidPhase(), VaporPhase()\nsys = MultiPhaseCompositionalSystemLV(eos, (L, V))\nmodel, parameters = setup_reservoir_model(res, sys, wells = [inj, prod], reference_densities = rhoS);\npush!(model[:Reservoir].output_variables, :Saturations)\nkr = BrooksCoreyRelPerm(sys, 2.0, 0.0, 1.0)\nmodel = replace_variables!(model, RelativePermeabilities = kr)\nT0 = repeat([303.15*Kelvin], 1, nc)\nparameters[:Reservoir][:Temperature] = T0\nstate0 = setup_reservoir_state(model, Pressure = 50*bar, OverallMoleFractions = [1.0, 0.0]);\nnothing #hide","category":"page"},{"location":"examples/co2_brine_2d_vertical/#Define-schedule","page":"Intro to compositional flow","title":"Define schedule","text":"","category":"section"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"5 year (5*365.24 days) simulation period","category":"page"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"dt0 = repeat([1]*day, 26)\ndt1 = repeat([10.0]*day, 180)\ndt = append!(dt0, dt1)\nrate_target = TotalRateTarget(9.5066e-06*meter^3/sec)\nI_ctrl = InjectorControl(rate_target, [0, 1], density = rhoVS)\nbhp_target = BottomHolePressureTarget(50*bar)\nP_ctrl = ProducerControl(bhp_target)\n\ncontrols = Dict()\ncontrols[:Injector] = I_ctrl\ncontrols[:Producer] = P_ctrl\nforces = setup_reservoir_forces(model, control = controls)\nws, states = simulate_reservoir(state0, model, dt, parameters = parameters, forces = forces)","category":"page"},{"location":"examples/co2_brine_2d_vertical/#Once-the-simulation-is-done,-we-can-plot-the-states","page":"Intro to compositional flow","title":"Once the simulation is done, we can plot the states","text":"","category":"section"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"Note that this example is intended for static publication in the documentation. For interactive visualization you can replace CairoMakie with GLMakie and use functions like plot_interactive to interactively visualize the states.","category":"page"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"z = states[end][:OverallMoleFractions][2, :]\nfunction plot_vertical(x, t)\n    data = reshape(x, (nx, nz))\n    data = data[:, end:-1:1]\n    fig, ax, plot = heatmap(data)\n    ax.title = t\n    Colorbar(fig[1, 2], plot)\n    fig\nend","category":"page"},{"location":"examples/co2_brine_2d_vertical/#Plot-final-CO2-mole-fraction","page":"Intro to compositional flow","title":"Plot final CO2 mole fraction","text":"","category":"section"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"plot_vertical(z, \"CO2\")","category":"page"},{"location":"examples/co2_brine_2d_vertical/#Plot-final-vapor-saturation","page":"Intro to compositional flow","title":"Plot final vapor saturation","text":"","category":"section"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"sg = states[end][:Saturations][2, :]\nplot_vertical(sg, \"Vapor saturation\")","category":"page"},{"location":"examples/co2_brine_2d_vertical/#Plot-final-pressure","page":"Intro to compositional flow","title":"Plot final pressure","text":"","category":"section"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"p = states[end][:Pressure]\nplot_vertical(p./bar, \"Pressure [bar]\")","category":"page"},{"location":"examples/co2_brine_2d_vertical/#Example-on-GitHub","page":"Intro to compositional flow","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"","category":"page"},{"location":"examples/co2_brine_2d_vertical/","page":"Intro to compositional flow","title":"Intro to compositional flow","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"EditURL = \"../../../examples/two_phase_unstable_gravity.jl\"","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Gravity-circulation-with-CPR-preconditioner","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"This example demonstrates a more complex gravity driven instability. The problem is a bit larger than the Gravity segregation example, and is therefore set up using the high level API that automatically sets up an iterative linear solver with a constrained pressure residual (CPR) preconditioner and automatic timestepping.","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"The high level API uses the more low level Jutul API seen in the other examples under the hood and makes more complex problems easy to set up. The same data structures and functions are used, allowing for deep customization if the defaults are not appropriate.","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"using JutulDarcy\nusing Jutul\nusing CairoMakie\ncmap = :seismic\nnx = nz = 100;\nnothing #hide","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Define-the-domain","page":"Gravity circulation with CPR preconditioner","title":"Define the domain","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"D = 10.0\ng = CartesianMesh((nx, 1, nz), (D, 1.0, D))\ndomain = reservoir_domain(g)","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Set-up-model-and-properties","page":"Gravity circulation with CPR preconditioner","title":"Set up model and properties","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"Darcy, bar, kg, meter, day = si_units(:darcy, :bar, :kilogram, :meter, :day)\np0 = 100*bar\nrhoLS = 1000.0*kg/meter^3 # Definition of fluid phases\nrhoVS = 500.0*kg/meter^3\ncl, cv = 1e-5/bar, 1e-4/bar\nL, V = LiquidPhase(), VaporPhase()\nsys = ImmiscibleSystem([L, V])\nmodel, parameters = setup_reservoir_model(domain, sys)\ndensity = ConstantCompressibilityDensities(sys, p0, [rhoLS, rhoVS], [cl, cv]) # Replace density with a lighter pair\nreplace_variables!(model, PhaseMassDensities = density);\nkr = BrooksCoreyRelPerm(sys, [2.0, 3.0])\nreplace_variables!(model, RelativePermeabilities = kr)","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Define-initial-saturation","page":"Gravity circulation with CPR preconditioner","title":"Define initial saturation","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"Set the left part of the domain to be filled by the vapor phase and the heavy liquid phase in the remainder. To do this, we grab the cell centroids in the x direction from the domain, reshape them to the structured mesh we are working on and define the liquid saturation from there.","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"c = domain[:cell_centroids]\nx = reshape(c[1, :], nx, nz)\n\nsL = zeros(nx, nz)\nplane = D/2.0\nfor i in 1:nx\n    for j = 1:nz\n        X = x[i, j]\n        sL[i, j] = clamp(Float64(X > plane), 0, 1)\n    end\nend\nheatmap(sL, colormap = cmap, axis = (title = \"Initial saturation\",))","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Set-up-initial-state","page":"Gravity circulation with CPR preconditioner","title":"Set up initial state","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"sL = vec(sL)'\nsV = 1 .- sL\ns0 = vcat(sV, sL)\nstate0 = setup_reservoir_state(model, Pressure = p0, Saturations = s0)","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Set-the-viscosity-of-the-phases","page":"Gravity circulation with CPR preconditioner","title":"Set the viscosity of the phases","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"By default, viscosity is a parameter and can be set per-phase and per cell.","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"μ = parameters[:Reservoir][:PhaseViscosities]\n@. μ[1, :] = 1e-3\n@. μ[2, :] = 5e-3","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"Convert time-steps from days to seconds","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"timesteps = repeat([10.0*3600*24], 20)\n_, states, = simulate_reservoir(state0, model, timesteps, parameters = parameters, info_level = 1);\nnothing #hide","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Plot-results","page":"Gravity circulation with CPR preconditioner","title":"Plot results","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"Plot initial saturation","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"tmp = reshape(state0[:Reservoir][:Saturations][1, :], nx, nz)\nf = Figure()\nax = Axis(f[1, 1], title = \"Before\")\nheatmap!(ax, tmp, colormap = cmap)","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"Plot intermediate saturation","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"tmp = reshape(states[length(states) ÷ 2][:Saturations][1, :], nx, nz)\nax = Axis(f[1, 2], title = \"Half way\")\nhm = heatmap!(ax, tmp, colormap = cmap)","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"Plot final saturation","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"tmp = reshape(states[end][:Saturations][1, :], nx, nz)\nax = Axis(f[1, 3], title = \"After\")\nhm = heatmap!(ax, tmp, colormap = cmap)\nColorbar(f[1, 4], hm)\nf","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Example-on-GitHub","page":"Gravity circulation with CPR preconditioner","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"EditURL = \"../../../examples/five_spot_ensemble.jl\"","category":"page"},{"location":"examples/five_spot_ensemble/#Quarter-five-spot-example","page":"Quarter-five-spot with variation","title":"Quarter-five-spot example","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"The quarter-five-spot is a standard test problem that simulates 1/4 of the five spot well pattern by assuming axial symmetry. The problem contains an injector in one corner and the producer in the opposing corner, with a significant volume of fluids injected into the domain.","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"using JutulDarcy, Jutul\nnx = 50","category":"page"},{"location":"examples/five_spot_ensemble/#Setup","page":"Quarter-five-spot with variation","title":"Setup","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"We define a function that, for a given porosity field, computes a solution with an estimated permeability field. For assumptions and derivation of the specific form of the Kozeny-Carman relation used in this example, see Lie, Knut-Andreas. An introduction to reservoir simulation using MATLAB/GNU Octave: User guide for the MATLAB Reservoir Simulation Toolbox (MRST). Cambridge University Press, 2019, Section 2.5.2","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"function perm_kozeny_carman(Φ)\n    return ((Φ^3)*(1e-5)^2)/(0.81*72*(1-Φ)^2);\nend\n\nfunction simulate_qfs(porosity = 0.2)\n    Dx = 1000.0\n    Dz = 10.0\n    Darcy = 9.869232667160130e-13\n    Darcy, bar, kg, meter, Kelvin, day, sec = si_units(:darcy, :bar, :kilogram, :meter, :Kelvin, :day, :second)\n\n    mesh = CartesianMesh((nx, nx, 1), (Dx, Dx, Dz))\n    K = perm_kozeny_carman.(porosity)\n    domain = reservoir_domain(mesh, permeability = K, porosity = porosity)\n    Inj = setup_vertical_well(domain, 1, 1, name = :Injector);\n    Prod = setup_vertical_well(domain, nx, nx, name = :Producer);\n    phases = (LiquidPhase(), VaporPhase())\n    rhoLS = 1000.0*kg/meter^3\n    rhoGS = 700.0*kg/meter^3\n    rhoS = [rhoLS, rhoGS]\n    sys = ImmiscibleSystem(phases, reference_densities = rhoS)\n    model, parameters = setup_reservoir_model(domain, sys, wells = [Inj, Prod])\n    c = [1e-6/bar, 1e-6/bar]\n    ρ = ConstantCompressibilityDensities(p_ref = 150*bar, density_ref = rhoS, compressibility = c)\n    kr = BrooksCoreyRelPerm(sys, [2.0, 2.0])\n    replace_variables!(model, PhaseMassDensities = ρ, RelativePermeabilities = kr);\n\n    state0 = setup_reservoir_state(model, Pressure = 150*bar, Saturations = [1.0, 0.0])\n    dt = repeat([30.0]*day, 12*10)\n    dt = vcat([0.1, 1.0, 10.0], dt)\n    inj_rate = Dx*Dx*Dz*0.2/sum(dt) # 1 PVI if average porosity is 0.2\n\n    rate_target = TotalRateTarget(inj_rate)\n    I_ctrl = InjectorControl(rate_target, [0.0, 1.0], density = rhoGS)\n    bhp_target = BottomHolePressureTarget(50*bar)\n    P_ctrl = ProducerControl(bhp_target)\n    controls = Dict()\n    controls[:Injector] = I_ctrl\n    controls[:Producer] = P_ctrl\n    forces = setup_reservoir_forces(model, control = controls)\n    return simulate_reservoir(state0, model, dt, parameters = parameters, forces = forces, info_level = -1)\nend","category":"page"},{"location":"examples/five_spot_ensemble/#Simulate-base-case","page":"Quarter-five-spot with variation","title":"Simulate base case","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"This will give the solution with uniform porosity of 0.2.","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"ws, states, report_time = simulate_qfs()","category":"page"},{"location":"examples/five_spot_ensemble/#Plot-the-solution-of-the-base-case","page":"Quarter-five-spot with variation","title":"Plot the solution of the base case","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"We observe a radial flow pattern initially, before coning occurs near the producer well once the fluid has reached the opposite corner. The uniform permeability and porosity gives axial symmetry at x=y.","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"using CairoMakie\nto_2d(x) = reshape(vec(x), nx, nx)\nget_sat(state) = to_2d(state[:Saturations][2, :])\nnt = length(report_time)\nfig = Figure()\nh = nothing\nax = Axis(fig[1, 1])\nh = contourf!(ax, get_sat(states[nt÷3]))\nax = Axis(fig[1, 2])\nh = contourf!(ax, get_sat(states[nt]))\nColorbar(fig[1, end+1], h)\nfig","category":"page"},{"location":"examples/five_spot_ensemble/#Create-10-realizations","page":"Quarter-five-spot with variation","title":"Create 10 realizations","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"We create a small set of realizations of the same model, with porosity that is uniformly varying between 0.05 and 0.3. This is not especially sophisticated geostatistics - for a more realistic approach, take a look at GeoStats.jl. The main idea is to get significantly different flow patterns as the porosity and permeability changes.","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"N = 10\nsaturations = []\nwells = []\nreport_step = nt\nfor i = 1:N\n    poro = 0.05 .+ 0.25*rand(Float64, (nx*nx))\n    ws, states, rt = simulate_qfs(poro)\n    push!(wells, ws)\n    push!(saturations, get_sat(states[report_step]))\nend","category":"page"},{"location":"examples/five_spot_ensemble/#Plot-the-oil-rate-at-the-producer-over-the-ensemble","page":"Quarter-five-spot with variation","title":"Plot the oil rate at the producer over the ensemble","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"using Statistics\nfig = Figure()\nax = Axis(fig[1, 1])\nfor i = 1:N\n    ws = wells[i]\n    q = -ws[:Producer][Symbol(\"Surface oil rate\")]\n    lines!(ax, report_time, q)\nend\nxlims!(ax, [mean(report_time), report_time[end]])\nylims!(ax, 0, 0.0075)\nfig","category":"page"},{"location":"examples/five_spot_ensemble/#Plot-the-average-saturation-over-the-ensemble","page":"Quarter-five-spot with variation","title":"Plot the average saturation over the ensemble","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"avg = mean(saturations)\nfig = Figure()\nh = nothing\nax = Axis(fig[1, 1])\nh = contourf!(ax, avg)\nfig","category":"page"},{"location":"examples/five_spot_ensemble/#Plot-the-isocontour-lines-over-the-ensemble","page":"Quarter-five-spot with variation","title":"Plot the isocontour lines over the ensemble","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"fig = Figure()\nh = nothing\nax = Axis(fig[1, 1])\nfor s in saturations\n    contour!(ax, s, levels = 0:0.1:1)\nend\nfig","category":"page"},{"location":"examples/five_spot_ensemble/#Example-on-GitHub","page":"Quarter-five-spot with variation","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"EditURL = \"../../../examples/mrst_validation.jl\"","category":"page"},{"location":"examples/mrst_validation/#Validation-of-Jutul-against-existing-reservoir-simulators","page":"Validation of reservoir simulator","title":"Validation of Jutul against existing reservoir simulators","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"This example contains validation of Jutul against MRST. In general, minor differences are observed. These can be traced back to a combination of different internal timestepping done by the simulators and that JutulDarcy by default uses a multisegment well formulation while MRST uses a standard instantaneous equilibrium model without well bore storage terms. These differences are most evident when simulators start up.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"These cases have been exported using the MRST jutul module which can export MRST or Eclipse-type of cases to a JutulDarcy-compatible input format. They can then be simulated using simulate_mrst_case.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"using JutulDarcy, Jutul\nusing CairoMakie","category":"page"},{"location":"examples/mrst_validation/#Define-a-few-utilities-for-plotting-the-MRST-results","page":"Validation of reservoir simulator","title":"Define a few utilities for plotting the MRST results","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"We are going to compare well responses against pre-computed results stored inside the JutulDarcy module.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"function mrst_case_path(name)\n    base_path, = splitdir(pathof(JutulDarcy))\n    joinpath(base_path, \"..\", \"test\", \"mrst\", \"$(name).mat\")\nend\n\nfunction mrst_solution(result)\n    return result.extra[:mrst][\"extra\"][1][\"mrst_solution\"]\nend\n\nfunction mrst_well_index(mrst_result, k)\n    return findfirst(isequal(\"$k\"), vec(mrst_result[\"names\"]))\nend\n\nfunction get_mrst_comparison(wdata, ref, wname, t = :bhp)\n    yscale = \"m³/s\"\n    if t == :bhp\n        tname = \"Bottom hole pressure\"\n        mname = \"bhp\"\n        yscale = \"Pa\"\n    elseif t == :qos\n        tname = \"Surface oil rate\"\n        mname = \"qOs\"\n    elseif t == :qws\n        tname = \"Surface water rate\"\n        mname = \"qWs\"\n    elseif t == :qgs\n        tname = \"Surface gas rate\"\n        mname = \"qGs\"\n    else\n        error(\"Not supported: $t\")\n    end\n    jutul = wdata[Symbol(tname)]\n    mrst = ref[mname][:, mrst_well_index(ref, wname)]\n\n    return (jutul, mrst, tname, yscale)\nend\n\nfunction plot_comparison(wells, ref, rep_t, t, wells_keys = keys(wells))\n    fig = Figure()\n    ax = Axis(fig[1, 1], xlabel = \"time (days)\")\n    l = \"\"\n    yscale = \"\"\n    T = rep_t./(3600*24.0)\n    for (w, d) in wells\n        if !(w in wells_keys)\n            continue\n        end\n        jutul, mrst, l, yscale = get_mrst_comparison(d, ref, w, t)\n        lines!(ax, T, abs.(jutul), label = \"$w\")\n        scatter!(ax, T, abs.(mrst), markersize = 8)\n    end\n    axislegend()\n    ax.ylabel[] = \"$l ($yscale)\"\n    fig\nend","category":"page"},{"location":"examples/mrst_validation/#The-Egg-model-(oil-water-compressible)","page":"Validation of reservoir simulator","title":"The Egg model (oil-water compressible)","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"A two-phase model that is taken from the first member of the EGG ensemble. For more details, see the paper where the ensemble is introduced:","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"Jansen, Jan-Dirk, et al. \"The egg model–a geological ensemble for reservoir simulation.\" Geoscience Data Journal 1.2 (2014): 192-195.","category":"page"},{"location":"examples/mrst_validation/#Simulate-model","page":"Validation of reservoir simulator","title":"Simulate model","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"egg = simulate_mrst_case(mrst_case_path(\"egg\"), info_level = -1)\nwells = egg.wells\nrep_t = egg.time\nref = mrst_solution(egg);\nnothing #hide","category":"page"},{"location":"examples/mrst_validation/#Compare-well-responses","page":"Validation of reservoir simulator","title":"Compare well responses","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"injectors = [:INJECT1, :INJECT2, :INJECT3, :INJECT4, :INJECT5, :INJECT6, :INJECT7]\nproducers = [:PROD1, :PROD2, :PROD3, :PROD4]","category":"page"},{"location":"examples/mrst_validation/#Bottom-hole-pressures","page":"Validation of reservoir simulator","title":"Bottom hole pressures","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :bhp, injectors)","category":"page"},{"location":"examples/mrst_validation/#Oil-rates","page":"Validation of reservoir simulator","title":"Oil rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qos, producers)","category":"page"},{"location":"examples/mrst_validation/#Water-rates","page":"Validation of reservoir simulator","title":"Water rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qws, producers)","category":"page"},{"location":"examples/mrst_validation/#SPE1-(black-oil,-disgas)","page":"Validation of reservoir simulator","title":"SPE1 (black oil, disgas)","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"A shortened version of the SPE1 benchmark case.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"Odeh, A.S. 1981. Comparison of Solutions to a Three-Dimensional Black-Oil Reservoir Simulation Problem. J Pet Technol 33 (1): 13–25. SPE-9723-PA","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"For comparison against other simulators, see the equivialent JutulSPE1 example in the Jutul module for MRST","category":"page"},{"location":"examples/mrst_validation/#Simulate-model-2","page":"Validation of reservoir simulator","title":"Simulate model","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"spe1 = simulate_mrst_case(mrst_case_path(\"spe1\"), info_level = -1)\nwells = spe1.wells\nrep_t = spe1.time\nref = mrst_solution(spe1);\nnothing #hide","category":"page"},{"location":"examples/mrst_validation/#Compare-well-responses-2","page":"Validation of reservoir simulator","title":"Compare well responses","text":"","category":"section"},{"location":"examples/mrst_validation/#Bottom-hole-pressures-2","page":"Validation of reservoir simulator","title":"Bottom hole pressures","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :bhp)","category":"page"},{"location":"examples/mrst_validation/#Gas-rates","page":"Validation of reservoir simulator","title":"Gas rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qgs, [:PRODUCER])","category":"page"},{"location":"examples/mrst_validation/#SPE3-(black-oil,-vapoil)","page":"Validation of reservoir simulator","title":"SPE3 (black oil, vapoil)","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"A black-oil variant of the SPE3 benchmark case.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"Kenyon, D. \"Third SPE comparative solution project: gas cycling of retrograde condensate reservoirs.\" Journal of Petroleum Technology 39.08 (1987): 981-997","category":"page"},{"location":"examples/mrst_validation/#Simulate-model-3","page":"Validation of reservoir simulator","title":"Simulate model","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"spe3 = simulate_mrst_case(mrst_case_path(\"spe3\"), info_level = -1)\nwells = spe3.wells\nrep_t = spe3.time\nref = mrst_solution(spe3);\nnothing #hide","category":"page"},{"location":"examples/mrst_validation/#Compare-well-responses-3","page":"Validation of reservoir simulator","title":"Compare well responses","text":"","category":"section"},{"location":"examples/mrst_validation/#Bottom-hole-pressures-3","page":"Validation of reservoir simulator","title":"Bottom hole pressures","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :bhp, [:PRODUCER])","category":"page"},{"location":"examples/mrst_validation/#Gas-rates-2","page":"Validation of reservoir simulator","title":"Gas rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qgs, [:PRODUCER])","category":"page"},{"location":"examples/mrst_validation/#Oil-rates-2","page":"Validation of reservoir simulator","title":"Oil rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qos, [:PRODUCER])","category":"page"},{"location":"examples/mrst_validation/#SPE9-(black-oil,-disgas)","page":"Validation of reservoir simulator","title":"SPE9 (black oil, disgas)","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"Example of the SPE9 model exported from MRST running in JutulDarcy.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"Killough, J. E. 1995. Ninth SPE comparative solution project: A   reexamination of black-oil simulation. In SPE Reservoir Simulation   Symposium,  12-15 February 1995, San Antonio, Texas. SPE 29110-MS","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"For comparison against other simulators, see the equivialent JutulSPE9 example in the Jutul module for MRST","category":"page"},{"location":"examples/mrst_validation/#Simulate-model-4","page":"Validation of reservoir simulator","title":"Simulate model","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"spe9 = simulate_mrst_case(mrst_case_path(\"spe9\"), info_level = -1)\nwells = spe9.wells\nrep_t = spe9.time\nref = mrst_solution(spe9);\nnothing #hide","category":"page"},{"location":"examples/mrst_validation/#Compare-well-responses-4","page":"Validation of reservoir simulator","title":"Compare well responses","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"injectors = [:INJE1]\nproducers = [Symbol(\"PROD$i\") for i in 1:25]","category":"page"},{"location":"examples/mrst_validation/#Injector-water-rate","page":"Validation of reservoir simulator","title":"Injector water rate","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qws, injectors)","category":"page"},{"location":"examples/mrst_validation/#Oil-rates-3","page":"Validation of reservoir simulator","title":"Oil rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qos, producers)","category":"page"},{"location":"examples/mrst_validation/#Water-rates-2","page":"Validation of reservoir simulator","title":"Water rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qws, producers)","category":"page"},{"location":"examples/mrst_validation/#Bottom-hole-pressures-4","page":"Validation of reservoir simulator","title":"Bottom hole pressures","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :bhp, producers)","category":"page"},{"location":"examples/mrst_validation/#Example-on-GitHub","page":"Validation of reservoir simulator","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"EditURL = \"../../../examples/wells_intro.jl\"","category":"page"},{"location":"examples/wells_intro/#Example-with-wells","page":"Intro to wells","title":"Example with wells","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"This example demonstrates how to set up a 3D domain with a layered permeability field, define wells and solve a simple production-injection schedule. We begin by loading the Jutul package that contains generic features like grids and linear solvers and the JutulDarcy package itself.","category":"page"},{"location":"examples/wells_intro/#Preliminaries","page":"Intro to wells","title":"Preliminaries","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"using JutulDarcy, Jutul","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"JutulDarcy uses SI units internally. It is therefore convenient to define a few constants at the start of the script to have more managable numbers later on.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Darcy, bar, kg, meter, day = si_units(:darcy, :bar, :kilogram, :meter, :day)","category":"page"},{"location":"examples/wells_intro/#Defining-a-porous-medium","page":"Intro to wells","title":"Defining a porous medium","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We start by defining the static part of our simulation problem – the porous medium itself.","category":"page"},{"location":"examples/wells_intro/#Defining-the-grid","page":"Intro to wells","title":"Defining the grid","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The first step is to create a grid for our simulation domain. We make a tiny 5 by 5 grid with 4 layers that discretizes a physical domain of 2000 by 1500 by 50 meters.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"nx = ny = 5\nnz = 4\ndims = (nx, ny, nz)\ng = CartesianMesh(dims, (2000.0, 1500.0, 50.0))","category":"page"},{"location":"examples/wells_intro/#Adding-properties-and-making-a-domain","page":"Intro to wells","title":"Adding properties and making a domain","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The grid by itself does not fully specify a porous medium. For that we need to specify the permeability in each cell and the porosity. Permeability, often denoted by a positive-definite tensor K, describes the relationship between a pressure gradient and the flow through the medium. Porosity is a dimensionless number between 0 and 1 that describes how much of the porous medium is void space where fluids can be present. The assumption of Darcy flow becomes less reasonable for high porosity values and the flow equations break down at zero porosity. A porosity of 0.2 is then a safe choice.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Jutul uses the DataDomain type to store a domain/grid together with data. For porous media simulation, JutulDarcy includes a convenience function reservoir_domain that contains defaults for permeability and porosity. We specify the permeability per-cell with varying values per layer in the vertical direction and a single porosity value for all cells that the function will expand for us. From the output, we can see that basic geometry primitives are also automatically added:","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"nlayer = nx*ny # Cells in each layer\nK = vcat(\n    repeat([0.65], nlayer),\n    repeat([0.3], nlayer),\n    repeat([0.5], nlayer),\n    repeat([0.2], nlayer)\n    )*Darcy\n\ndomain = reservoir_domain(g, permeability = K, porosity = 0.2)","category":"page"},{"location":"examples/wells_intro/#Defining-wells","page":"Intro to wells","title":"Defining wells","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Now that we have a porous medium with all static properties set up, it is time to introduce some driving forces. Jutul assumes no-flow boundary conditions on all boundary faces unless otherwise specified so we can go ahead and add wells to the model.","category":"page"},{"location":"examples/wells_intro/#A-vertical-producer-well","page":"Intro to wells","title":"A vertical producer well","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We will define two wells: A first well is named \"Producer\" and is a vertical well positioned at (1, 1). By default, the setup_vertical_well function perforates all layers in the model.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Prod = setup_vertical_well(domain, 1, 1, name = :Producer);\nnothing #hide","category":"page"},{"location":"examples/wells_intro/#A-single-perforation-injector","page":"Intro to wells","title":"A single-perforation injector","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We also define an injector by setup_well. This function allows us to pass a vector of either cell indices or tuples of logical indices that the well trajectory will follow. We setup the injector in the upper left corner.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Inj = setup_well(domain, [(nx, ny, 1)], name = :Injector);\nnothing #hide","category":"page"},{"location":"examples/wells_intro/#Choosing-a-fluid-system","page":"Intro to wells","title":"Choosing a fluid system","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"To solve multiphase flow with our little toy reservoir we need to pick a fluid system. The type of system determines what physical effects are modelled, what parameters are required and the runtime and accuracy of the resulting simulation. The choice is in practice a trade-off between accuracy, runtime and available data that should be informed by modelling objectives. In this example our goal is to understand how to set up a simple well problem and the ImmiscibleSystem requires a minimal amount of input. We define liquid and gas phases and their densities at some reference conditions and instantiate the system.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"# Set up a two-phase immiscible system and define a density secondary variable\nphases = (LiquidPhase(), VaporPhase())\nrhoLS = 1000.0\nrhoGS = 100.0\nrhoS = [rhoLS, rhoGS] .* kg/meter^3\nsys = ImmiscibleSystem(phases, reference_densities = rhoS)","category":"page"},{"location":"examples/wells_intro/#Creating-the-model","page":"Intro to wells","title":"Creating the model","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The same fluid system can be used for both flow inside the wells and the reservoir. JutulDarcy treats wells as first-class citizens and models flow inside the well bore using the same fluid description as the reservoir, with modified equations to account for the non-Darcy velocities. We call the utility function that sets up all of this for us:","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"model, parameters = setup_reservoir_model(domain, sys, wells = [Inj, Prod])\nmodel","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The model is an instance of the MultiModel from Jutul where a submodel is defined for the reservoir, each of the wells and the facility that controls both wells. In addition we can see the cross-terms that couple these wells together. If we want to see more details on how either of these are set up, we can display for example the reservoir model.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"reservoir = model[:Reservoir]","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We can see that the model contains primary variables, secondary variables (sometimes referred to as properties) and static parameters in addition to the system we already set up. These can be replaced or modified to alter the behavior of the system.","category":"page"},{"location":"examples/wells_intro/#Replace-the-density-function-with-our-custom-version","page":"Intro to wells","title":"Replace the density function with our custom version","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Let us change the definition of phase mass densities for our model. We'd like to model our liquid phase as weakly compressible and the vapor phase with more significant compressibility. A common approach is to define densities rho_alpha^s at some reference pressure p_r and use a phase compressibility c_alpha to extrapolate around that known value.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"rho_alpha (p) = rho_alpha^s exp((p - p_r)c_alpha)","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"This is already implement in Jutul and we simply need to instantiate the variable definition:","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"c = [1e-6/bar, 1e-4/bar]\nρ = ConstantCompressibilityDensities(p_ref = 1*bar, density_ref = rhoS, compressibility = c)","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Before replacing it in the model. This change will propagate to all submodels that have a definition given for PhaseMassDensities, including the wells. The facility, which does not know about densities, will ignore it.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"replace_variables!(model, PhaseMassDensities = ρ);\nnothing #hide","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"This concludes the setup of the model.","category":"page"},{"location":"examples/wells_intro/#Set-up-initial-state","page":"Intro to wells","title":"Set up initial state","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The model is time-dependent and requires initial conditions. For the immiscible model it is sufficient to specify the reference phase pressure and the saturations for both phases, summed up to one. These can be specified per cell or one for the entire grid. Specifying a single pressure for the entire model is not very realistic, but should be fine for our simple example. The initial conditions will equilibrate themselves from gravity fairly quickly.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"state0 = setup_reservoir_state(model, Pressure = 150*bar, Saturations = [1.0, 0.0])","category":"page"},{"location":"examples/wells_intro/#Set-up-report-time-steps-and-injection-rate","page":"Intro to wells","title":"Set up report time steps and injection rate","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We create a set of time-steps. These are report steps where the solution will be reported, but the simulator itself will do internal subdivision of time steps if these values are too coarse for the solvers. We also define an injection rate of a full pore-volume (at reference conditions) of gas.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"dt = repeat([30.0]*day, 12*5)\npv = pore_volume(model, parameters)\ninj_rate = sum(pv)/sum(dt)","category":"page"},{"location":"examples/wells_intro/#Set-up-well-controls","page":"Intro to wells","title":"Set up well controls","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We then set up a total rate target (positive value for injection) together with a corresponding injection control that specifies the mass fractions of the two components/phases for pure gas injection, with surface density given by the known gas density. The producer operates at a fixed bottom hole pressure. These are given as a Dict with keys that correspond to the well names.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"rate_target = TotalRateTarget(inj_rate)\nI_ctrl = InjectorControl(rate_target, [0.0, 1.0], density = rhoGS)\nbhp_target = BottomHolePressureTarget(50*bar)\nP_ctrl = ProducerControl(bhp_target)\ncontrols = Dict()\ncontrols[:Injector] = I_ctrl\ncontrols[:Producer] = P_ctrl\n# Set up the forces","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Set up forces for the whole model. For this example, all other forces than the well controls are defaulted (amounting to no-flow for the reservoir). Jutul supports either a single set of forces for the entire simulation, or a vector of equal length to dt with varying forces. Reasonable operational limits for wells are also set up by default.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"forces = setup_reservoir_forces(model, control = controls)","category":"page"},{"location":"examples/wells_intro/#Simulate-the-model","page":"Intro to wells","title":"Simulate the model","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We are finally ready to simulate the model for the given initial state state0, report steps dt, parameters and forces. As the model is small, barring any compilation time, this should run in about 300 ms.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"result = simulate_reservoir(state0, model, dt, parameters = parameters, forces = forces)","category":"page"},{"location":"examples/wells_intro/#Unpacking-the-result","page":"Intro to wells","title":"Unpacking the result","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The result contains a lot of data. This can be unpacked to get the most typical desired outputs: Well responses, reservoir states and the time they correspond to.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"wd, states, t = result","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We could in fact equally well have written wd, states, t = simulate_reservoir(...) to arrive at the same result.","category":"page"},{"location":"examples/wells_intro/#Plot-the-producer-responses","page":"Intro to wells","title":"Plot the producer responses","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We load a plotting package to plot the wells.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"using CairoMakie","category":"page"},{"location":"examples/wells_intro/#Plot-the-surface-rates-at-the-producer","page":"Intro to wells","title":"Plot the surface rates at the producer","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We observe that the total rate does not vary much, but the composition changes from liquid to gas as the front propagate through the domain and hits the producer well.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"qg = wd[:Producer][Symbol(\"Surface gas rate\")]\nqt = wd[:Producer][Symbol(\"Surface total rate\")]\nql = qt - qg\nx = t/day\nfig = Figure()\nax = Axis(fig[1, 1], xlabel = \"Time (days)\",\n                     ylabel = \"Rate (m³/day)\",\n                     title = \"Well production rates\")\nlines!(ax, x, abs.(qg).*day, label = \"Gas\")\nlines!(ax, x, abs.(ql).*day, label = \"Liquid\")\nlines!(ax, x, abs.(qt).*day, label = \"Total\")\naxislegend(position = :rb)\nfig","category":"page"},{"location":"examples/wells_intro/#Plot-bottom-hole-pressure-of-the-injector","page":"Intro to wells","title":"Plot bottom hole pressure of the injector","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The pressure builds during injection, until the gas breaks through to the other well.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"bh = wd[:Injector][Symbol(\"Bottom hole pressure\")]\nfig = Figure()\nax = Axis(fig[1, 1], xlabel = \"Time (days)\",\n                     ylabel = \"Bottom hole pressure (bar)\",\n                     title = \"Injector bottom hole pressure\")\nlines!(ax, x, bh./bar)\nfig","category":"page"},{"location":"examples/wells_intro/#Example-on-GitHub","page":"Intro to wells","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"This page was generated using Literate.jl.","category":"page"},{"location":"usage/solution/#Solving-the-equations","page":"Solving the equations","title":"Solving the equations","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"By default, Jutul solves a system as a fully-coupled implicit system of equations discretized with a two-point flux approximation with single-point upwind.","category":"page"},{"location":"usage/solution/#Newton's-method","page":"Solving the equations","title":"Newton's method","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"The standard way of solving a system of non-linear equations is by Newton's method (also known as Newton-Raphson's method). A quick recap: For a vector valued residual mathbfr(x) of the primary variable vector mathbfx we can defined a Newton update:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"mathbfx^k+1 = mathbfr^k - J^-1 mathbfr(mathbfx^k) quad J_ij = fracpartial mathbfr_ipartial mathbfx_j","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"JutulDarcy solves systems that generally have both non-smooth behavior and physical constraints on the values for textbfx. For that reason, we modify Newton's method slightly:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"mathbfx^k+1 = mathbfr^k + omega(Delta mathbfx)","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"Here, omega is a function that limits the variables so that they do not change too much (e.g. Appleyard chopping, limiting of pressure, saturation and composition updates) and that they are within the prescribed limits. There are also options for automated global dampening in the presence of convergence issues. The update is then defined from inverting the Jacobian:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"Delta mathbfx = -J^-1 mathbfr(mathbfx^k) quad J_ij = fracpartial mathbfr_ipartial mathbfx_j","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"Starting with mathbfx^0as some initial guess taken from the previous time-step, we can solve the system by iterating upon this loop.","category":"page"},{"location":"usage/solution/#Linear-solvers-and-linear-systems","page":"Solving the equations","title":"Linear solvers and linear systems","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"For most practical applications it is not feasible or efficient to invert the Jacobian. JutulDarcy uses preconditioned iterative solvers by default, but it is possible to use direct solvers as well when working with smaller models. The high level interface for setting up a reservoir model setup_reservoir_model has an optional block_backend=true keyword argument that determines the matrix format, and consequently the linear solver type to be used.","category":"page"},{"location":"usage/solution/#Direct-solvers","page":"Solving the equations","title":"Direct solvers","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"If block_backend is set to false, Jutul will assemble into the standard Julia CSC sparse matrix with Float64 elements and Julia's default direct solver will be used. It is also possible to use other Julia solvers on this system, but the default preconditioners assume that block backend is enabled.","category":"page"},{"location":"usage/solution/#Iterative-solver","page":"Solving the equations","title":"Iterative solver","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"If block_backend is set to true, Jutul will by default use a constrained-pressure residual (CPR) preconditioner for BiCGStab. Jutul relies on Krylov.jl for iterative solvers. The main function that selects the linear solver is reservoir_linsolve that allows for the selection of different preconditioners and linear solvers.","category":"page"},{"location":"usage/solution/#Single-model-(only-porous-medium)","page":"Solving the equations","title":"Single model (only porous medium)","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"If the model is a single model (e.g. only a reservoir) the matrix format is a block-CSC matrix that combines Julia's builtin sparse matrix format with statically sized elements from the StaticArrays.jl package. If we consider the two-phase immiscible system from Multi-phase, immiscible flow we have a pair of equations R_n R_w together with the corresponding primary variables pressure and first saturation p S_n defined for all N_c cells. Let us simplify the notation a bit so that the subscripts of the primary variables are p s and define a N_c times N_c block Jacobian linear system where the entires are given by:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"J_ij = beginbmatrix\n   left(fracpartial r_npartial pright)_ij  left(fracpartial r_npartial sright)_ij \n   left(fracpartial r_wpartial pright)_ij  left(fracpartial r_wpartial sright)_ij endbmatrix = beginbmatrix\n   J_np  J_ns \n   J_wp  J_ws\nendbmatrix_ij","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"This block system has several advantages:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"We immediately get access to more powerful version of standard Julia preconditioners provided that all operations used are applicable for matrices and are applied in the right commutative order. For example, JutulDarcy uses the ILUZero.jl package when a CSC linear system is preconditioned with incomplete LU factorization with zero fill-in.\nSparse matrix vector products are much more efficient as less indicies need to be looked up for each element wise multiplication.\nPerforming local reductions over variables is much easier when they are located in a local matrix.","category":"page"},{"location":"usage/solution/#Constrained-Pressure-Residual","page":"Solving the equations","title":"Constrained Pressure Residual","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"The CPR preconditioner CPRPreconditioner is a multi-stage physics-informed preconditioner that seeks to decouple the global pressure part of the system from the local  transport part. In the limits of incompressible flow without gravity it can be thought of as an elliptic / hyperbolic splitting.","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"The short version of the CPR preconditioner can be motivated by our test system:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"r_n = fracpartialpartial t ((1 - S_w) rho_n phi) + nabla cdot (rho_n vecv_n) - rho_n q_n = 0\nr_w = fracpartialpartial t (S_w rho_w phi) + nabla cdot (rho_w vecv_w) - rho_w q_w = 0","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"For simplicity, we assume that there is no gravity, source terms, or compressibility. Each equation can then be divided by their respective densities and summed up to produce a pressure equation:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"r_p = fracpartialpartial t ((1 - S_w) phi) + nabla cdot vecv_n + fracpartialpartial t (S_w phi) + nabla cdot  vecv_w \n= fracpartialpartial t ((S_w - S_w) phi) + nabla cdot (vecv_n + vecv_w) \n= nabla cdot (vecv_n + vecv_w) \n= - nabla mathbfK(k_rwmu_w + k_rnmu_n) nabla p \n= - nabla mathbfKlambda_t nabla p = 0","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"The final equation is the variable coefficient Poisson equation and is referred to as the incompressible pressure equation for a porous  media. We know that algebraic multigrid preconditioners (AMG) are highly efficient for linear systems made by discretizing this equation. The idea in CPR is to exploit this by constructing an approximate pressure equation that is suited for AMG inside the preconditioner.","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"Constructing the preconditioner is done in two stages:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"First, weights for each equation is found locally in each cell that decouples the time derivative from the non-pressure variables. In the above example, this was the true IMPES weights (dividing by density). JutulDarcy supports analytical true IMPES weights for some systems, numerical true IMPES weights for all systems and quasi IMPES weights for all systems.\nA pressure equation is formed by weighting each equation by the respective weights and summing. We then have two systems: The pressure system r_p with scalar entries and the full system r that has block structure.","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"During the linear solve, the preconditioner is then made up of two broad stages: First, a preconditioner is applied to the pressure part (typically AMG), then the full system is preconditioned (typically ILU(0)) after the residual has been corrected by the pressure estimate:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"Form weighted pressure residual r_p = sum_i w_i r_i.\nApply pressure preconditioer M_p: Delta p = M_p^-1 r_p.\nCorrect global residual r^* = r - J P(Delta p) where P expands the pressure update to the full system vector, with zero entries outside the pressure indices.\nPrecondition the full system Delta x^* = M^-1r^*\nCorrect the global update with the pressure to obtain the final update: Delta x = Delta x^* + P(Delta p)","category":"page"},{"location":"usage/solution/#Multi-model-(porous-medium-with-wells)","page":"Solving the equations","title":"Multi model (porous medium with wells)","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"If a model is a porous medium with wells, the same preconditioners can be used, but an additional step is required to incorporate the well system. In practical terms, this means that our linearized system is expanded to multiple linear systems:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"J Delta mathbfx = beginbmatrix\n   J_rr  J_rw \n   J_wr  J_ww\nendbmatrix\nbeginbmatrix\nDelta mathbfx_r \nDelta mathbfx_w\nendbmatrix\n = \nbeginbmatrix\nmathbfr_r \nmathbfr_w\nendbmatrix","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"Here, J_rr is the reservoir equations differentiated with respect to the reservoir primary variables, i.e. the Jacobian from the previous section. J_ww is the well system differentiated with respect to the well primary variables. The cross terms, J_rwand J_wr, are the same equations differentiated with respect to the primary variables of the other system.","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"The well system is generally much smaller than the reservoir system and can be solved by a direct solver. We would like to reuse the block preconditioners defined for the base system. The approach we use is a Schur complement approach to solve the full system. If we linearly eliminate the dependence of the reservoir equations on the well primary variables, we obtain the reduced system:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"J Delta mathbfx = beginbmatrix\n   J_rr - J_rwJ_ww^-1J_wr  0 \n   J_wr  J_ww\nendbmatrix\nbeginbmatrix\nDelta mathbfx_r \nDelta mathbfx_w\nendbmatrix\n = \nbeginbmatrix\nmathbfr_r - J_rwJ_ww^-1mathbfr_w\nmathbfr_w\nendbmatrix","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"We can then solve the system in terms of the reservoir degrees of freedom where the system is a block linear system and we already have a working preconditioner:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"left(J_rr - J_rwJ_ww^-1J_wrright)mathbfx_r = mathbfr_r - J_rwJ_ww^-1mathbfr_w","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"Once that system is solved for mathbfx_r, we can recover the well degrees of freedom mathbfr_w directly:","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"mathbfr_w = J_ww^-1(mathbfr_w - J_wrmathbfx_r)","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"note: Efficiency of Schur complement\nExplicitly forming the matrix J_rr - J_rwJ_ww^-1J_wr will generally lead to a lot of fill-in in the linear system. JutulDarcy instead uses the action of J_rr - J_rwJ_ww^-1J_wr as a linear operator from LinearOperators.jl. This means that we must apply the inverse of the well system every time we need to compute the residual or action of the system matrix, but fortunately performing the action of the Schur complement is inexpensive as long as J_ww is small and the factorization can be stored. ","category":"page"},{"location":"usage/solution/#References","page":"Solving the equations","title":"References","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"Wallis, J.R. \"Incomplete Gaussian Elimination as a Preconditioning for Generalized Conjugate Gradient Acceleration.\" Paper presented at the SPE Reservoir Simulation Symposium, San Francisco, California, November 1983","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"Cao, H., Tchelepi, H. A., Wallis, J., and H. Yardumian. \"Parallel Scalable Unstructured CPR-Type Linear Solver for Reservoir Simulation.\" Paper presented at the SPE Annual Technical Conference and Exhibition, Dallas, Texas, October 2005","category":"page"},{"location":"usage/solution/#Parallel-simulations","page":"Solving the equations","title":"Parallel simulations","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"JutulDarcy can use threads by default, but advanced options can improve performance significantly for larger models.","category":"page"},{"location":"usage/solution/#Overview-of-parallel-support","page":"Solving the equations","title":"Overview of parallel support","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"There are two main ways of exploiting multiple cores in Jutul/JutulDarcy: Threads are automatically used for assembly and can be used for parts of the linear solve. If you require the best performance, you have to go to MPI where the linear solvers can use a parallel BoomerAMG preconditioner via HYPRE.jl.","category":"page"},{"location":"usage/solution/#Shared-memory","page":"Solving the equations","title":"Shared memory","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"An experimental thread-parallel backend for matrices and linear algebra can be enabled by setting backend=:csr in the call to setup_reservoir_model. This backend provides additional features such as a parallel zero-overlap ILU(0) implementation and parallel apply for AMG, but these features are still work in progress.","category":"page"},{"location":"usage/solution/#MPI-support-for-distributed-memory","page":"Solving the equations","title":"MPI support for distributed memory","text":"","category":"section"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"It is possible to run cases using MPI. You will have to set up an environment with the following packages under Julia 1.9+: PartitionedArrays, MPI, JutulDarcy and HYPRE. This is generally the best performing solver setup available, even if you are working in a shared memory environment.","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"Write your script as usual, but in your call to setup_reservoir_simulator, pass the optional argument mode = :mpi. You must then run the file using mpiexec. ","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"note: Note\nYou should be familiar with the MPI programming model to use this feature. See MPI.jl and MPIClusterManagers.jl for more details, and how MPI is handled in Julia specifically.","category":"page"},{"location":"usage/solution/","page":"Solving the equations","title":"Solving the equations","text":"note: Note\nMPI consolidates results by writing files to disk. Unless you have a plan to work with the distributed states in-memory returned by the simulate! call, it is best to specify a output_path optional argument to setup_reservoir_simulator. After the simulation, that folder will contain output just as if you had run the case in serial.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = JutulDarcy","category":"page"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using Jutul;\n    using JutulDarcy;\nend","category":"page"},{"location":"#JutulDarcy","page":"Home","title":"JutulDarcy","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for JutulDarcy.jl. The documentation is currently limited to docstrings and a series of examples. The examples are sorted by complexity. We suggest you start with Gravity segregation example.","category":"page"},{"location":"","page":"Home","title":"Home","text":"info: Note about units\nJutulDarcy does currently not make us of conversion factors or explicit units can in principle use any consistent unit system. Some default scaling of variables assume that the magnitude pressures and velocities roughly match that of strict SI (e.g. Pascals and cubic meters per second). These scaling factors are primarily used when iterative linear solvers are used.","category":"page"},{"location":"","page":"Home","title":"Home","text":"JutulDarcy builds upon the general features found in Jutul.jl. You may also find it useful to look at the Jutul.jl documentation.","category":"page"},{"location":"#Reading-input-files","page":"Home","title":"Reading input files","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"It is also possible to read cases that have been set up in MRST (see setupcasefrom_mrst and simulatemrstcase) or from .DATA files (see parsedatafile and simulatedatafile)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
